<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classOpenMM_1_1CustomManyParticleForce" kind="class" language="C++" prot="public">
    <compoundname>OpenMM::CustomManyParticleForce</compoundname>
    <basecompoundref refid="classOpenMM_1_1Force" prot="public" virt="non-virtual">OpenMM::Force</basecompoundref>
    <includes refid="CustomManyParticleForce_8h" local="no">CustomManyParticleForce.h</includes>
    <innerclass refid="classOpenMM_1_1CustomManyParticleForce_1_1ExclusionInfo" prot="private">OpenMM::CustomManyParticleForce::ExclusionInfo</innerclass>
    <innerclass refid="classOpenMM_1_1CustomManyParticleForce_1_1FunctionInfo" prot="private">OpenMM::CustomManyParticleForce::FunctionInfo</innerclass>
    <innerclass refid="classOpenMM_1_1CustomManyParticleForce_1_1GlobalParameterInfo" prot="private">OpenMM::CustomManyParticleForce::GlobalParameterInfo</innerclass>
    <innerclass refid="classOpenMM_1_1CustomManyParticleForce_1_1ParticleInfo" prot="private">OpenMM::CustomManyParticleForce::ParticleInfo</innerclass>
    <innerclass refid="classOpenMM_1_1CustomManyParticleForce_1_1ParticleParameterInfo" prot="private">OpenMM::CustomManyParticleForce::ParticleParameterInfo</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classOpenMM_1_1CustomManyParticleForce_1a944dec3bdd19c279460e4e32d809175d" prot="public" static="no" strong="no">
        <type></type>
        <name>NonbondedMethod</name>
        <enumvalue id="classOpenMM_1_1CustomManyParticleForce_1a944dec3bdd19c279460e4e32d809175daea5e432acd7239cccec3edaed3d2e2e9" prot="public">
          <name>NoCutoff</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No cutoff is applied to nonbonded interactions. The full set of interactions is computed exactly. This necessarily means that periodic boundary conditions cannot be used. This is the default. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1CustomManyParticleForce_1a944dec3bdd19c279460e4e32d809175da931b647406ccc793977eb8e436a0301e" prot="public">
          <name>CutoffNonPeriodic</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interactions are ignored if any two particles are further apart than the cutoff distance. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1CustomManyParticleForce_1a944dec3bdd19c279460e4e32d809175da09bd72ee3edd879fec50696d5c89970e" prot="public">
          <name>CutoffPeriodic</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Periodic boundary conditions are used, so that each particle interacts only with the nearest periodic copy of each other particle. Interactions are ignored if any two particles are further apart than the cutoff distance. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an enumeration of the different methods that may be used for handling long range nonbonded forces. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="195" column="5" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="195" bodyend="210"/>
      </memberdef>
      <memberdef kind="enum" id="classOpenMM_1_1CustomManyParticleForce_1a122a6b7ac24f31de610fa9f3a5c87812" prot="public" static="no" strong="no">
        <type></type>
        <name>PermutationMode</name>
        <enumvalue id="classOpenMM_1_1CustomManyParticleForce_1a122a6b7ac24f31de610fa9f3a5c87812a0a532d44310b8064c80aebd8caf55137" prot="public">
          <name>SinglePermutation</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>For any set of particles, the interaction is evaluated only once for a single permutation of the particles. There is no guarantee about which permutation will be used (aside from the requirement to satisfy type filters), so the expression must be symmetric. If cutoffs are used, then every particle in the set must be within the cutoff distance of every other particle. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1CustomManyParticleForce_1a122a6b7ac24f31de610fa9f3a5c87812a1bf4bb815bdc87644e6d56952d2c113f" prot="public">
          <name>UniqueCentralParticle</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The interaction is treated as an interaction between one central particle (p1) and various other nearby particles (p2, p3, ...). For a set of N particles it will be evaluated N times, once with each particle as p1. The expression must be symmetric with respect to the other particles, but may treat p1 differently. If cutoffs are used, then every particle must be within the cutoff distance of p1. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an enumeration of the different modes for selecting which permutations of a set of particles to evaluate the interaction for. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="215" column="5" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="215" bodyend="230"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classOpenMM_1_1CustomManyParticleForce_1a3f25668ceb194ca51fcd9a1500ffc0ca" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int OpenMM::CustomManyParticleForce::particlesPerSet</definition>
        <argsstring></argsstring>
        <name>particlesPerSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="512" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomManyParticleForce_1a1041c70d1e5a1a846bf193fa73a72f45" prot="private" static="no" mutable="no">
        <type><ref refid="classOpenMM_1_1CustomManyParticleForce_1a944dec3bdd19c279460e4e32d809175d" kindref="member">NonbondedMethod</ref></type>
        <definition>NonbondedMethod OpenMM::CustomManyParticleForce::nonbondedMethod</definition>
        <argsstring></argsstring>
        <name>nonbondedMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="513" column="21" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomManyParticleForce_1a229ae820e9cc07a9c73cea1a510cb8a8" prot="private" static="no" mutable="no">
        <type><ref refid="classOpenMM_1_1CustomManyParticleForce_1a122a6b7ac24f31de610fa9f3a5c87812" kindref="member">PermutationMode</ref></type>
        <definition>PermutationMode OpenMM::CustomManyParticleForce::permutationMode</definition>
        <argsstring></argsstring>
        <name>permutationMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="514" column="21" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomManyParticleForce_1a98a036b35297ccc97b7964c51494896a" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double OpenMM::CustomManyParticleForce::cutoffDistance</definition>
        <argsstring></argsstring>
        <name>cutoffDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="515" column="12" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomManyParticleForce_1a758bbf6b7690449ae0a908d7bde74632" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string OpenMM::CustomManyParticleForce::energyExpression</definition>
        <argsstring></argsstring>
        <name>energyExpression</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="516" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomManyParticleForce_1a31b329cd6ba8a3cbfbe94995dbe0e353" prot="private" static="no" mutable="no">
        <type>std::vector&lt; ParticleParameterInfo &gt;</type>
        <definition>std::vector&lt;ParticleParameterInfo&gt; OpenMM::CustomManyParticleForce::particleParameters</definition>
        <argsstring></argsstring>
        <name>particleParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="517" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="517" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomManyParticleForce_1a27527a12dcb4f6d02f5426396d480379" prot="private" static="no" mutable="no">
        <type>std::vector&lt; GlobalParameterInfo &gt;</type>
        <definition>std::vector&lt;GlobalParameterInfo&gt; OpenMM::CustomManyParticleForce::globalParameters</definition>
        <argsstring></argsstring>
        <name>globalParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="518" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomManyParticleForce_1a17970ec55a9a474a3d5b46a11782ca40" prot="private" static="no" mutable="no">
        <type>std::vector&lt; ParticleInfo &gt;</type>
        <definition>std::vector&lt;ParticleInfo&gt; OpenMM::CustomManyParticleForce::particles</definition>
        <argsstring></argsstring>
        <name>particles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="519" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomManyParticleForce_1a5cd5c6f1e9bc9468165ff6f4ba699ec9" prot="private" static="no" mutable="no">
        <type>std::vector&lt; ExclusionInfo &gt;</type>
        <definition>std::vector&lt;ExclusionInfo&gt; OpenMM::CustomManyParticleForce::exclusions</definition>
        <argsstring></argsstring>
        <name>exclusions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="520" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomManyParticleForce_1ac4720f5b2d0d59aba072c4a8e020e33b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; FunctionInfo &gt;</type>
        <definition>std::vector&lt;FunctionInfo&gt; OpenMM::CustomManyParticleForce::functions</definition>
        <argsstring></argsstring>
        <name>functions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="521" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomManyParticleForce_1a4646d0bb39f8dcbf71d580b3692f3a12" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::set&lt; int &gt; &gt;</type>
        <definition>std::vector&lt;std::set&lt;int&gt; &gt; OpenMM::CustomManyParticleForce::typeFilters</definition>
        <argsstring></argsstring>
        <name>typeFilters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="522" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="522" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a92fec63caf4891cf771cabacb1117773" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>OpenMM::CustomManyParticleForce::CustomManyParticleForce</definition>
        <argsstring>(int particlesPerSet, const std::string &amp;energy)</argsstring>
        <name>CustomManyParticleForce</name>
        <param>
          <type>int</type>
          <declname>particlesPerSet</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>energy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classOpenMM_1_1CustomManyParticleForce" kindref="compound">CustomManyParticleForce</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particlesPerSet</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of particles in each set for which the energy is evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>energy</parametername>
</parameternamelist>
<parameterdescription>
<para>an algebraic expression giving the interaction energy of each triplet as a function of particle positions, inter-particle distances, angles, and any global and per-particle parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="238" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1ae053b8130dd2db8c59c84159b3a660f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>OpenMM::CustomManyParticleForce::~CustomManyParticleForce</definition>
        <argsstring>()</argsstring>
        <name>~CustomManyParticleForce</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="239" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1ac61cfa179b19a8a62c55c9c17feb3777" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomManyParticleForce::getNumParticlesPerSet</definition>
        <argsstring>() const</argsstring>
        <name>getNumParticlesPerSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of particles in each set for which the energy is evaluated </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="243" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="243" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a1bf7f9cf4d2f581c1f142beb8f475dfc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomManyParticleForce::getNumParticles</definition>
        <argsstring>() const</argsstring>
        <name>getNumParticles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of particles for which force field parameters have been defined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="249" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a70149cdaf106fa370e32f31c7688120c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomManyParticleForce::getNumExclusions</definition>
        <argsstring>() const</argsstring>
        <name>getNumExclusions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of particle pairs whose interactions should be excluded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="255" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="255" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a58abc10dc8996bf8ce0b7ae9f778a6bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomManyParticleForce::getNumPerParticleParameters</definition>
        <argsstring>() const</argsstring>
        <name>getNumPerParticleParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of per-particle parameters that the interaction depends on. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="261" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="261" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1acf8ba71c95fb256259f8799a491d4e38" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomManyParticleForce::getNumGlobalParameters</definition>
        <argsstring>() const</argsstring>
        <name>getNumGlobalParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of global parameters that the interaction depends on. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="267" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="267" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a226a8e86160c9825a423b552d574a1f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomManyParticleForce::getNumTabulatedFunctions</definition>
        <argsstring>() const</argsstring>
        <name>getNumTabulatedFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of tabulated functions that have been defined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="273" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a86677392af2297c03d1126cdc4504198" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; OpenMM::CustomManyParticleForce::getEnergyFunction</definition>
        <argsstring>() const</argsstring>
        <name>getEnergyFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the algebraic expression that gives the interaction energy of each bond </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="279" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1ab7b6025367fb47f39a096a7355ca4cd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomManyParticleForce::setEnergyFunction</definition>
        <argsstring>(const std::string &amp;energy)</argsstring>
        <name>setEnergyFunction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>energy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the algebraic expression that gives the interaction energy of each bond </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="283" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a2a4ee8e6fef64d020527ab6480bba85d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1CustomManyParticleForce_1a944dec3bdd19c279460e4e32d809175d" kindref="member">NonbondedMethod</ref></type>
        <definition>NonbondedMethod OpenMM::CustomManyParticleForce::getNonbondedMethod</definition>
        <argsstring>() const</argsstring>
        <name>getNonbondedMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the method used for handling long range nonbonded interactions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="287" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1af7eace3de08aa99acb800e72fb5a5f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomManyParticleForce::setNonbondedMethod</definition>
        <argsstring>(NonbondedMethod method)</argsstring>
        <name>setNonbondedMethod</name>
        <param>
          <type><ref refid="classOpenMM_1_1CustomManyParticleForce_1a944dec3bdd19c279460e4e32d809175d" kindref="member">NonbondedMethod</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the method used for handling long range nonbonded interactions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="291" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1ab7ace8898dcfd44fa75f3ca59aa8d6d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1CustomManyParticleForce_1a122a6b7ac24f31de610fa9f3a5c87812" kindref="member">PermutationMode</ref></type>
        <definition>PermutationMode OpenMM::CustomManyParticleForce::getPermutationMode</definition>
        <argsstring>() const</argsstring>
        <name>getPermutationMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the mode that selects which permutations of a set of particles to evaluate the interaction for. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="295" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a03487fa4b86961b6e76dbf657d588996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomManyParticleForce::setPermutationMode</definition>
        <argsstring>(PermutationMode mode)</argsstring>
        <name>setPermutationMode</name>
        <param>
          <type><ref refid="classOpenMM_1_1CustomManyParticleForce_1a122a6b7ac24f31de610fa9f3a5c87812" kindref="member">PermutationMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the mode that selects which permutations of a set of particles to evaluate the interaction for. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="299" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1adf030052a4c3e23aca0f9b71175dc524" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double OpenMM::CustomManyParticleForce::getCutoffDistance</definition>
        <argsstring>() const</argsstring>
        <name>getCutoffDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.</para>
<para><simplesect kind="return"><para>the cutoff distance, measured in nm </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="306" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a80dd7647103f7a245349c3c50ee143ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomManyParticleForce::setCutoffDistance</definition>
        <argsstring>(double distance)</argsstring>
        <name>setCutoffDistance</name>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>the cutoff distance, measured in nm </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="313" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1abdfb7f5c94a13a5ca5c5b0ea31219c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomManyParticleForce::addPerParticleParameter</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>addPerParticleParameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new per-particle parameter that the interaction may depend on.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the parameter that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="320" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a350c09dc4d4cde1535532b124ad29330" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; OpenMM::CustomManyParticleForce::getPerParticleParameterName</definition>
        <argsstring>(int index) const</argsstring>
        <name>getPerParticleParameterName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a per-particle parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to get the name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the parameter name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="327" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1abef730595fae390e2b15265b2e67eb9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomManyParticleForce::setPerParticleParameterName</definition>
        <argsstring>(int index, const std::string &amp;name)</argsstring>
        <name>setPerParticleParameterName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the name of a per-particle parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to set the name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="334" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1aadcdd39df91c41618ac5080527a1997f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomManyParticleForce::addGlobalParameter</definition>
        <argsstring>(const std::string &amp;name, double defaultValue)</argsstring>
        <name>addGlobalParameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new global parameter that the interaction may depend on. The default value provided to this method is the initial value of the parameter in newly created Contexts. You can change the value at any time by calling setParameter() on the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value of the parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the parameter that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="344" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a411e392b4194501cac08e852150c23b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; OpenMM::CustomManyParticleForce::getGlobalParameterName</definition>
        <argsstring>(int index) const</argsstring>
        <name>getGlobalParameterName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to get the name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the parameter name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="351" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a51725ccb88e9b6ba7442779645e03f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomManyParticleForce::setGlobalParameterName</definition>
        <argsstring>(int index, const std::string &amp;name)</argsstring>
        <name>setGlobalParameterName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the name of a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to set the name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="358" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1aa844219390438ff0cb541a1e6219d2e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double OpenMM::CustomManyParticleForce::getGlobalParameterDefaultValue</definition>
        <argsstring>(int index) const</argsstring>
        <name>getGlobalParameterDefaultValue</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the default value of a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to get the default value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the parameter default value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="365" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a3a4b59f596928b09b6c62075458b8ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomManyParticleForce::setGlobalParameterDefaultValue</definition>
        <argsstring>(int index, double defaultValue)</argsstring>
        <name>setGlobalParameterDefaultValue</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the default value of a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to set the default value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value of the parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="372" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a160ad97ccf764f82a7c50dec22ced64e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomManyParticleForce::addParticle</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;parameters=std::vector&lt; double &gt;(), int type=0)</argsstring>
        <name>addParticle</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>parameters</declname>
          <defval>std::vector&lt; double &gt;()</defval>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add the nonbonded force parameters for a particle. This should be called once for each particle in the <ref refid="classOpenMM_1_1System" kindref="compound">System</ref>. When it is called for the i&apos;th time, it specifies the parameters for the i&apos;th particle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of parameters for the new particle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the new particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the particle that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="381" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a0f0aaeaef7d20bbb0dfc820984b3d1c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomManyParticleForce::getParticleParameters</definition>
        <argsstring>(int index, std::vector&lt; double &gt; &amp;parameters, int &amp;type) const</argsstring>
        <name>getParticleParameters</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the nonbonded force parameters for a particle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the particle for which to get parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of parameters for the specified particle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the specified particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="389" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1aab10a981b3895640fd40c9ac6cb51323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomManyParticleForce::setParticleParameters</definition>
        <argsstring>(int index, const std::vector&lt; double &gt; &amp;parameters, int type)</argsstring>
        <name>setParticleParameters</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the nonbonded force parameters for a particle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the particle for which to set parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of parameters for the specified particle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the specified particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="397" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1ac4ac7e589fb19c7061d98b11fe908673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomManyParticleForce::addExclusion</definition>
        <argsstring>(int particle1, int particle2)</argsstring>
        <name>addExclusion</name>
        <param>
          <type>int</type>
          <declname>particle1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>particle2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a particle pair to the list of interactions that should be excluded.</para>
<para>In many cases, you can use <ref refid="classOpenMM_1_1CustomManyParticleForce_1a9dcfd142e0248a59c1f15510b4a7f319" kindref="member">createExclusionsFromBonds()</ref> rather than adding each exclusion explicitly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particle1</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the first particle in the pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particle2</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the second particle in the pair </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the exclusion that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="407" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a69e14702bcb4c35c031569a6da7bca25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomManyParticleForce::getExclusionParticles</definition>
        <argsstring>(int index, int &amp;particle1, int &amp;particle2) const</argsstring>
        <name>getExclusionParticles</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>particle1</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>particle2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the particles in a pair whose interaction should be excluded.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the exclusion for which to get particle indices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">particle1</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the first particle in the pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">particle2</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the second particle in the pair </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="415" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1aca0f7e248e24b318137fc8ef213fb475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomManyParticleForce::setExclusionParticles</definition>
        <argsstring>(int index, int particle1, int particle2)</argsstring>
        <name>setExclusionParticles</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>particle1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>particle2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the particles in a pair whose interaction should be excluded.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the exclusion for which to set particle indices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particle1</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the first particle in the pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particle2</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the second particle in the pair </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="423" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a9dcfd142e0248a59c1f15510b4a7f319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomManyParticleForce::createExclusionsFromBonds</definition>
        <argsstring>(const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;bonds, int bondCutoff)</argsstring>
        <name>createExclusionsFromBonds</name>
        <param>
          <type>const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;</type>
          <declname>bonds</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bondCutoff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Identify exclusions based on the molecular topology. Particles which are separated by up to a specified number of bonds are added as exclusions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bonds</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of bonds based on which to construct exclusions. Each element specifies the indices of two particles that are bonded to each other. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bondCutoff</parametername>
</parameternamelist>
<parameterdescription>
<para>pairs of particles that are separated by this many bonds or fewer are added to the list of exclusions </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="432" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a4d99c3fd5631a071bf1b2b7722c8d067" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomManyParticleForce::getTypeFilter</definition>
        <argsstring>(int index, std::set&lt; int &gt; &amp;types) const</argsstring>
        <name>getTypeFilter</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>std::set&lt; int &gt; &amp;</type>
          <declname>types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the allowed particle types for one of the particles involved in the interaction. If this an empty set (the default), no filter is applied and all interactions are evaluated regardless of the type of the specified particle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the particle within the interaction (between 0 and <ref refid="classOpenMM_1_1CustomManyParticleForce_1ac61cfa179b19a8a62c55c9c17feb3777" kindref="member">getNumParticlesPerSet()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">types</parametername>
</parameternamelist>
<parameterdescription>
<para>the allowed types for the specified particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="441" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1abe9be09bf8c3045bf941e6acdf49c69d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomManyParticleForce::setTypeFilter</definition>
        <argsstring>(int index, const std::set&lt; int &gt; &amp;types)</argsstring>
        <name>setTypeFilter</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::set&lt; int &gt; &amp;</type>
          <declname>types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the allowed particle types for one of the particles involved in the interaction. If this an empty set (the default), no filter is applied and all interactions are evaluated regardless of the type of the specified particle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the particle within the interaction (between 0 and <ref refid="classOpenMM_1_1CustomManyParticleForce_1ac61cfa179b19a8a62c55c9c17feb3777" kindref="member">getNumParticlesPerSet()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>types</parametername>
</parameternamelist>
<parameterdescription>
<para>the allowed types for the specified particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="450" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a6987e099311e11fde0c4b21845955d72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomManyParticleForce::addTabulatedFunction</definition>
        <argsstring>(const std::string &amp;name, TabulatedFunction *function)</argsstring>
        <name>addTabulatedFunction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> *</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a tabulated function that may appear in the energy expression.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the function as it appears in expressions </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> object defining the function. The <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> should have been created on the heap with the &quot;new&quot; operator. The <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> takes over ownership of it, and deletes it when the <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> itself is deleted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the function that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="460" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a026feab06c9b049fbd529b198557d8a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> &amp;</type>
        <definition>const TabulatedFunction &amp; OpenMM::CustomManyParticleForce::getTabulatedFunction</definition>
        <argsstring>(int index) const</argsstring>
        <name>getTabulatedFunction</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a const reference to a tabulated function that may appear in the energy expression.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the function to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> object defining the function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="467" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1af9960720ff04e177679f2fc4f4db3215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> &amp;</type>
        <definition>TabulatedFunction &amp; OpenMM::CustomManyParticleForce::getTabulatedFunction</definition>
        <argsstring>(int index)</argsstring>
        <name>getTabulatedFunction</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a reference to a tabulated function that may appear in the energy expression.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the function to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> object defining the function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="474" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1ac84dd3f61e96a2d20d17c8b5d6d841fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; OpenMM::CustomManyParticleForce::getTabulatedFunctionName</definition>
        <argsstring>(int index) const</argsstring>
        <name>getTabulatedFunctionName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a tabulated function that may appear in the energy expression.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the function to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the name of the function as it appears in expressions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="481" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1ac53c2551138438733b0706812c0b6ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomManyParticleForce::updateParametersInContext</definition>
        <argsstring>(Context &amp;context)</argsstring>
        <name>updateParametersInContext</name>
        <param>
          <type><ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the per-particle parameters and tabulated functions in a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> to match those stored in this <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> object. This method provides an efficient method to update certain parameters in an existing <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> without needing to reinitialize it. Simply call <ref refid="classOpenMM_1_1CustomManyParticleForce_1aab10a981b3895640fd40c9ac6cb51323" kindref="member">setParticleParameters()</ref> to modify this object&apos;s parameters, then call <ref refid="classOpenMM_1_1CustomManyParticleForce_1ac53c2551138438733b0706812c0b6ab8" kindref="member">updateParametersInContext()</ref> to copy them over to the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>.</para>
<para>This method has several limitations. The only information it updates is the values of per-particle parameters and tabulated functions. All other aspects of the <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> (the energy function, nonbonded method, cutoff distance, etc.) are unaffected and can only be changed by reinitializing the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>. Also, this method cannot be used to add new particles, only to change the parameters of existing ones. While the tabulated values of a function can change, everything else about it (its dimensions, the data range) must not be changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="494" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a188db924fe51896f2af3216864b67040" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool OpenMM::CustomManyParticleForce::usesPeriodicBoundaryConditions</definition>
        <argsstring>() const</argsstring>
        <name>usesPeriodicBoundaryConditions</name>
        <reimplements refid="classOpenMM_1_1Force_1a955afab55a1cd8b24cdf91258477237f">usesPeriodicBoundaryConditions</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether or not this force makes use of periodic boundary conditions.</para>
<para><simplesect kind="return"><para>true if force uses PBC and false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="501" column="10" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="501" bodyend="503"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classOpenMM_1_1CustomManyParticleForce_1a273e76e612988e9dd1860da24a44bf3f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ForceImpl *</type>
        <definition>ForceImpl * OpenMM::CustomManyParticleForce::createImpl</definition>
        <argsstring>() const</argsstring>
        <name>createImpl</name>
        <reimplements refid="classOpenMM_1_1Force_1a12dc4c2566ab670d47ef05bda169fa05">createImpl</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> is created, it invokes this method on each <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> in the <ref refid="classOpenMM_1_1System" kindref="compound">System</ref>. It should create a new ForceImpl object which can be used by the context for calculating forces. The ForceImpl will be deleted automatically when the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> is deleted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="505" column="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class supports a wide variety of nonbonded N-particle interactions, where N is user specified. The interaction energy is determined by an arbitrary, user specified algebraic expression that is evaluated for every possible set of N particles in the system. It may depend on the positions of the individual particles, the distances between pairs of particles, the angles formed by sets of three particles, and the dihedral angles formed by sets of four particles.</para>
<para>Be aware that the cost of evaluating an N-particle interaction increases very rapidly with N. Values larger than N=3 are rarely used.</para>
<para>We refer to a set of particles for which the energy is being evaluated as p1, p2, p3, etc. The energy expression may depend on the following variables and functions:</para>
<para><itemizedlist>
<listitem>
<para>x1, y1, z1, x2, y2, z2, etc.: The x, y, and z coordinates of the particle positions. For example, x1 is the x coordinate of particle p1, and y3 is the y coordinate of particle p3. </para>
</listitem>
<listitem>
<para>distance(p1, p2): the distance between particles p1 and p2 (where &quot;p1&quot; and &quot;p2&quot; may be replaced by the names of whichever particles you want to calculate the distance between). </para>
</listitem>
<listitem>
<para>angle(p1, p2, p3): the angle formed by the three specified particles. </para>
</listitem>
<listitem>
<para>dihedral(p1, p2, p3, p4): the dihedral angle formed by the four specified particles. </para>
</listitem>
<listitem>
<para>arbitrary global and per-particle parameters that you define. </para>
</listitem>
</itemizedlist>
</para>
<para>To use this class, create a <ref refid="classOpenMM_1_1CustomManyParticleForce" kindref="compound">CustomManyParticleForce</ref> object, passing an algebraic expression to the constructor that defines the interaction energy of each set of particles. Then call <ref refid="classOpenMM_1_1CustomManyParticleForce_1abdfb7f5c94a13a5ca5c5b0ea31219c9b" kindref="member">addPerParticleParameter()</ref> to define per-particle parameters, and <ref refid="classOpenMM_1_1CustomManyParticleForce_1aadcdd39df91c41618ac5080527a1997f" kindref="member">addGlobalParameter()</ref> to define global parameters. The values of per-particle parameters are specified as part of the system definition, while values of global parameters may be modified during a simulation by calling <ref refid="classOpenMM_1_1Context_1a368b7f53ee35bb151ee686441b7900af" kindref="member">Context::setParameter()</ref>.</para>
<para>Next, call <ref refid="classOpenMM_1_1CustomManyParticleForce_1a160ad97ccf764f82a7c50dec22ced64e" kindref="member">addParticle()</ref> once for each particle in the <ref refid="classOpenMM_1_1System" kindref="compound">System</ref> to set the values of its per-particle parameters. The number of particles for which you set parameters must be exactly equal to the number of particles in the <ref refid="classOpenMM_1_1System" kindref="compound">System</ref>, or else an exception will be thrown when you try to create a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>. After a particle has been added, you can modify its parameters by calling <ref refid="classOpenMM_1_1CustomManyParticleForce_1aab10a981b3895640fd40c9ac6cb51323" kindref="member">setParticleParameters()</ref>. This will have no effect on Contexts that already exist unless you call <ref refid="classOpenMM_1_1CustomManyParticleForce_1ac53c2551138438733b0706812c0b6ab8" kindref="member">updateParametersInContext()</ref>.</para>
<para>Multi-particle interactions can be very expensive to evaluate, so they are usually used with a cutoff distance. The exact interpretation of the cutoff depends on the permutation mode, as discussed below.</para>
<para><ref refid="classOpenMM_1_1CustomManyParticleForce" kindref="compound">CustomManyParticleForce</ref> also lets you specify &quot;exclusions&quot;, particular pairs of particles whose interactions should be omitted from force and energy calculations. This is most often used for particles that are bonded to each other. If you specify a pair of particles as an exclusion, <emphasis>all</emphasis> sets that include those two particles will be omitted.</para>
<para>As an example, the following code creates a <ref refid="classOpenMM_1_1CustomManyParticleForce" kindref="compound">CustomManyParticleForce</ref> that implements an Axilrod-Teller potential. This is an interaction between three particles that depends on all three distances and angles formed by the particles.</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    CustomManyParticleForce* force = new CustomManyParticleForce(3,
*        &quot;C*(1+3*cos(theta1)*cos(theta2)*cos(theta3))/(r12*r13*r23)^3;&quot;
*        &quot;theta1=angle(p1,p2,p3); theta2=angle(p2,p3,p1); theta3=angle(p3,p1,p2);&quot;
*        &quot;r12=distance(p1,p2); r13=distance(p1,p3); r23=distance(p2,p3)&quot;);
*    force-&gt;setPermutationMode(CustomManyParticleForce::SinglePermutation);
*
* </verbatim></para>
<para>This force depends on one parameter, C. The following code defines it as a global parameter:</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    force-&gt;addGlobalParameter(&quot;C&quot;, 1.0);
*
* </verbatim></para>
<para>Notice that the expression is symmetric with respect to the particles. It only depends on the products cos(theta1)*cos(theta2)*cos(theta3) and r12*r13*r23, both of which are unchanged if the labels p1, p2, and p3 are permuted. This is required because we specified SinglePermutation as the permutation mode. (This is the default, so we did not really need to set it, but doing so makes the example clearer.) In this mode, the expression is only evaluated once for each set of particles. No guarantee is made about which particle will be identified as p1, p2, etc. Therefore, the energy <emphasis>must</emphasis> be symmetric with respect to exchange of particles. Otherwise, the results would be undefined because permuting the labels would change the energy.</para>
<para>Not all many-particle interactions work this way. Another common pattern is for the expression to describe an interaction between one central particle and other nearby particles. An example of this is the 3-particle piece of the Stillinger-Weber potential:</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    CustomManyParticleForce* force = new CustomManyParticleForce(3,
*        &quot;L*eps*(cos(theta1)+1/3)^2*exp(sigma*gamma/(r12-a*sigma))*exp(sigma*gamma/(r13-a*sigma));&quot;
*        &quot;r12 = distance(p1,p2); r13 = distance(p1,p3); theta1 = angle(p3,p1,p2)&quot;);
*    force-&gt;setPermutationMode(CustomManyParticleForce::UniqueCentralParticle);
*
* </verbatim></para>
<para>When the permutation mode is set to UniqueCentralParticle, particle p1 is treated as the central particle. For a set of N particles, the expression is evaluated N times, once with each particle as p1. The expression can therefore treat p1 differently from the other particles. Notice that it is still symmetric with respect to p2 and p3, however. There is no guarantee about how those labels will be assigned to particles.</para>
<para>Distance cutoffs are applied in different ways depending on the permutation mode. In SinglePermutation mode, every particle in the set must be within the cutoff distance of every other particle. If <emphasis>any</emphasis> two particles are further apart than the cutoff distance, the interaction is skipped. In UniqueCentralParticle mode, each particle must be within the cutoff distance of the central particle, but not necessarily of all the other particles. The cutoff may therefore exclude a subset of the permutations of a set of particles.</para>
<para>Another common situation is that some particles are fundamentally different from others, causing the expression to be inherently non-symmetric. An example would be a water model that involves three particles, two of which <emphasis>must</emphasis> be hydrogen and one of which <emphasis>must</emphasis> be oxygen. Cases like this can be implemented using particle types.</para>
<para>A particle type is an integer that you specify when you call <ref refid="classOpenMM_1_1CustomManyParticleForce_1a160ad97ccf764f82a7c50dec22ced64e" kindref="member">addParticle()</ref>. (If you omit the argument, it defaults to 0.) For the water model, you could specify 0 for all oxygen atoms and 1 for all hydrogen atoms. You can then call <ref refid="classOpenMM_1_1CustomManyParticleForce_1abe9be09bf8c3045bf941e6acdf49c69d" kindref="member">setTypeFilter()</ref> to specify the list of allowed types for each of the N particles involved in an interaction:</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    set&amp;lt;int&amp;gt; oxygenTypes, hydrogenTypes;
*    oxygenTypes.insert(0);
*    hydrogenTypes.insert(1);
*    force-&gt;setTypeFilter(0, oxygenTypes);
*    force-&gt;setTypeFilter(1, hydrogenTypes);
*    force-&gt;setTypeFilter(2, hydrogenTypes);
*
* </verbatim></para>
<para>This specifies that of the three particles in an interaction, p1 must be oxygen while p2 and p3 must be hydrogen. The energy expression will only be evaluated for triplets of particles that satisfy those requirements. It will still only be evaluated once for each triplet, so it must still be symmetric with respect to p2 and p3.</para>
<para>Expressions may involve the operators + (add), - (subtract), * (multiply), / (divide), and ^ (power), and the following functions: sqrt, exp, log, sin, cos, sec, csc, tan, cot, asin, acos, atan, atan2, sinh, cosh, tanh, erf, erfc, min, max, abs, floor, ceil, step, delta, select. All trigonometric functions are defined in radians, and log is the natural logarithm. step(x) = 0 if x is less than 0, 1 otherwise. delta(x) = 1 if x is 0, 0 otherwise. select(x,y,z) = z if x = 0, y otherwise. The names of per-particle parameters have the suffix &quot;1&quot;, &quot;2&quot;, etc. appended to them to indicate the values for the multiple interacting particles. For example, if you define a per-particle parameter called &quot;charge&quot;, then the variable &quot;charge2&quot; is the charge of particle p2. As seen above, the expression may also involve intermediate quantities that are defined following the main expression, using &quot;;&quot; as a separator.</para>
<para>This class also supports the functions pointdistance(x1, y1, z1, x2, y2, z2), pointangle(x1, y1, z1, x2, y2, z2, x3, y3, z3), and pointdihedral(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4). These functions are similar to distance(), angle(), and dihedral(), but the arguments are the coordinates of points to perform the calculation based on rather than the names of particles. This enables more flexible geometric calculations. For example, the following computes the distance from particle p1 to the midpoint between particles p2 and p3.</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    CustomManyParticleForce* force = new CustomManyParticleForce(3, &quot;pointdistance(x1, y1, z1, (x2+x3)/2, (y2+y3)/2, (z2+z3)/2)&quot;);
*
* </verbatim></para>
<para>In addition, you can call <ref refid="classOpenMM_1_1CustomManyParticleForce_1a6987e099311e11fde0c4b21845955d72" kindref="member">addTabulatedFunction()</ref> to define a new function based on tabulated values. You specify the function by creating a <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> object. That function can then appear in the expression. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>OpenMM::CustomManyParticleForce</label>
        <link refid="classOpenMM_1_1CustomManyParticleForce"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>OpenMM::Force</label>
        <link refid="classOpenMM_1_1Force"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>OpenMM::CustomManyParticleForce</label>
        <link refid="classOpenMM_1_1CustomManyParticleForce"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>OpenMM::Force</label>
        <link refid="classOpenMM_1_1Force"/>
      </node>
    </collaborationgraph>
    <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" line="190" column="1" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomManyParticleForce.h" bodystart="190" bodyend="523"/>
    <listofallmembers>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1ac4ac7e589fb19c7061d98b11fe908673" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>addExclusion</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1aadcdd39df91c41618ac5080527a1997f" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>addGlobalParameter</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a160ad97ccf764f82a7c50dec22ced64e" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>addParticle</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1abdfb7f5c94a13a5ca5c5b0ea31219c9b" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>addPerParticleParameter</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a6987e099311e11fde0c4b21845955d72" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>addTabulatedFunction</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a9dcfd142e0248a59c1f15510b4a7f319" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>createExclusionsFromBonds</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a273e76e612988e9dd1860da24a44bf3f" prot="protected" virt="virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>createImpl</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a92fec63caf4891cf771cabacb1117773" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>CustomManyParticleForce</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a98a036b35297ccc97b7964c51494896a" prot="private" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>cutoffDistance</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a944dec3bdd19c279460e4e32d809175da931b647406ccc793977eb8e436a0301e" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>CutoffNonPeriodic</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a944dec3bdd19c279460e4e32d809175da09bd72ee3edd879fec50696d5c89970e" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>CutoffPeriodic</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a758bbf6b7690449ae0a908d7bde74632" prot="private" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>energyExpression</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a5cd5c6f1e9bc9468165ff6f4ba699ec9" prot="private" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>exclusions</name></member>
      <member refid="classOpenMM_1_1Force_1a40e75e251ec93d3bc9fc87b96026fbc2" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>Force</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1ac4720f5b2d0d59aba072c4a8e020e33b" prot="private" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>functions</name></member>
      <member refid="classOpenMM_1_1Force_1a152bbe8e42e036e697b587c0832e233b" prot="protected" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getContextImpl</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1adf030052a4c3e23aca0f9b71175dc524" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getCutoffDistance</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a86677392af2297c03d1126cdc4504198" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getEnergyFunction</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a69e14702bcb4c35c031569a6da7bca25" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getExclusionParticles</name></member>
      <member refid="classOpenMM_1_1Force_1ab9428f8447cba02d548963242dd674ff" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getForceGroup</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1aa844219390438ff0cb541a1e6219d2e0" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getGlobalParameterDefaultValue</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a411e392b4194501cac08e852150c23b0" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getGlobalParameterName</name></member>
      <member refid="classOpenMM_1_1Force_1aef442934a17134fe13f5dcc40ada7b11" prot="protected" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getImplInContext</name></member>
      <member refid="classOpenMM_1_1Force_1a1af3134b705088bd8ed5b6e7521db43d" prot="protected" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getImplInContext</name></member>
      <member refid="classOpenMM_1_1Force_1a479fe60e5fe8e344109f794ecd7b7bab" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getName</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a2a4ee8e6fef64d020527ab6480bba85d" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getNonbondedMethod</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a70149cdaf106fa370e32f31c7688120c" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getNumExclusions</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1acf8ba71c95fb256259f8799a491d4e38" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getNumGlobalParameters</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a1bf7f9cf4d2f581c1f142beb8f475dfc" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getNumParticles</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1ac61cfa179b19a8a62c55c9c17feb3777" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getNumParticlesPerSet</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a58abc10dc8996bf8ce0b7ae9f778a6bf" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getNumPerParticleParameters</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a226a8e86160c9825a423b552d574a1f3" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getNumTabulatedFunctions</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a0f0aaeaef7d20bbb0dfc820984b3d1c0" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getParticleParameters</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1ab7ace8898dcfd44fa75f3ca59aa8d6d8" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getPermutationMode</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a350c09dc4d4cde1535532b124ad29330" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getPerParticleParameterName</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a026feab06c9b049fbd529b198557d8a3" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getTabulatedFunction</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1af9960720ff04e177679f2fc4f4db3215" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getTabulatedFunction</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1ac84dd3f61e96a2d20d17c8b5d6d841fb" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getTabulatedFunctionName</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a4d99c3fd5631a071bf1b2b7722c8d067" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>getTypeFilter</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a27527a12dcb4f6d02f5426396d480379" prot="private" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>globalParameters</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a944dec3bdd19c279460e4e32d809175daea5e432acd7239cccec3edaed3d2e2e9" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>NoCutoff</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a1041c70d1e5a1a846bf193fa73a72f45" prot="private" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>nonbondedMethod</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a944dec3bdd19c279460e4e32d809175d" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>NonbondedMethod</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a31b329cd6ba8a3cbfbe94995dbe0e353" prot="private" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>particleParameters</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a17970ec55a9a474a3d5b46a11782ca40" prot="private" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>particles</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a3f25668ceb194ca51fcd9a1500ffc0ca" prot="private" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>particlesPerSet</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a229ae820e9cc07a9c73cea1a510cb8a8" prot="private" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>permutationMode</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a122a6b7ac24f31de610fa9f3a5c87812" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>PermutationMode</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a80dd7647103f7a245349c3c50ee143ea" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>setCutoffDistance</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1ab7b6025367fb47f39a096a7355ca4cd9" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>setEnergyFunction</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1aca0f7e248e24b318137fc8ef213fb475" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>setExclusionParticles</name></member>
      <member refid="classOpenMM_1_1Force_1a53e3829a91825a9f6aa17e5ade713f84" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>setForceGroup</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a3a4b59f596928b09b6c62075458b8ece" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>setGlobalParameterDefaultValue</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a51725ccb88e9b6ba7442779645e03f48" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>setGlobalParameterName</name></member>
      <member refid="classOpenMM_1_1Force_1ac0a383a4d4203427652f1ad5b2528215" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>setName</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1af7eace3de08aa99acb800e72fb5a5f1f" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>setNonbondedMethod</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1aab10a981b3895640fd40c9ac6cb51323" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>setParticleParameters</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a03487fa4b86961b6e76dbf657d588996" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>setPermutationMode</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1abef730595fae390e2b15265b2e67eb9f" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>setPerParticleParameterName</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1abe9be09bf8c3045bf941e6acdf49c69d" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>setTypeFilter</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a122a6b7ac24f31de610fa9f3a5c87812a0a532d44310b8064c80aebd8caf55137" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>SinglePermutation</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a4646d0bb39f8dcbf71d580b3692f3a12" prot="private" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>typeFilters</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a122a6b7ac24f31de610fa9f3a5c87812a1bf4bb815bdc87644e6d56952d2c113f" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>UniqueCentralParticle</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1ac53c2551138438733b0706812c0b6ab8" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>updateParametersInContext</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1a188db924fe51896f2af3216864b67040" prot="public" virt="virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>usesPeriodicBoundaryConditions</name></member>
      <member refid="classOpenMM_1_1CustomManyParticleForce_1ae053b8130dd2db8c59c84159b3a660f9" prot="public" virt="non-virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>~CustomManyParticleForce</name></member>
      <member refid="classOpenMM_1_1Force_1a6516b32ebeb95a694f56d93bdf81f4fb" prot="public" virt="virtual"><scope>OpenMM::CustomManyParticleForce</scope><name>~Force</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
