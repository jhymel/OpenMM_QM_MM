<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classOpenMM_1_1CustomNonbondedForce" kind="class" language="C++" prot="public">
    <compoundname>OpenMM::CustomNonbondedForce</compoundname>
    <basecompoundref refid="classOpenMM_1_1Force" prot="public" virt="non-virtual">OpenMM::Force</basecompoundref>
    <includes refid="CustomNonbondedForce_8h" local="no">CustomNonbondedForce.h</includes>
    <innerclass refid="classOpenMM_1_1CustomNonbondedForce_1_1ExclusionInfo" prot="private">OpenMM::CustomNonbondedForce::ExclusionInfo</innerclass>
    <innerclass refid="classOpenMM_1_1CustomNonbondedForce_1_1FunctionInfo" prot="private">OpenMM::CustomNonbondedForce::FunctionInfo</innerclass>
    <innerclass refid="classOpenMM_1_1CustomNonbondedForce_1_1GlobalParameterInfo" prot="private">OpenMM::CustomNonbondedForce::GlobalParameterInfo</innerclass>
    <innerclass refid="classOpenMM_1_1CustomNonbondedForce_1_1InteractionGroupInfo" prot="private">OpenMM::CustomNonbondedForce::InteractionGroupInfo</innerclass>
    <innerclass refid="classOpenMM_1_1CustomNonbondedForce_1_1ParticleInfo" prot="private">OpenMM::CustomNonbondedForce::ParticleInfo</innerclass>
    <innerclass refid="classOpenMM_1_1CustomNonbondedForce_1_1PerParticleParameterInfo" prot="private">OpenMM::CustomNonbondedForce::PerParticleParameterInfo</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classOpenMM_1_1CustomNonbondedForce_1aeaaa8a021f20549be459597f1ce87a8f" prot="public" static="no" strong="no">
        <type></type>
        <name>NonbondedMethod</name>
        <enumvalue id="classOpenMM_1_1CustomNonbondedForce_1aeaaa8a021f20549be459597f1ce87a8fa062bd34990d0b5b0de303e8b26315c7c" prot="public">
          <name>NoCutoff</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No cutoff is applied to nonbonded interactions. The full set of N^2 interactions is computed exactly. This necessarily means that periodic boundary conditions cannot be used. This is the default. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1CustomNonbondedForce_1aeaaa8a021f20549be459597f1ce87a8fad934e3d58ed39dcb6e7e16eb851c1a8d" prot="public">
          <name>CutoffNonPeriodic</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interactions beyond the cutoff distance are ignored. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1CustomNonbondedForce_1aeaaa8a021f20549be459597f1ce87a8fa351b557a382884ce52e19b4d39410971" prot="public">
          <name>CutoffPeriodic</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Periodic boundary conditions are used, so that each particle interacts only with the nearest periodic copy of each other particle. Interactions beyond the cutoff distance are ignored. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an enumeration of the different methods that may be used for handling long range nonbonded forces. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="150" column="5" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="150" bodyend="165"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classOpenMM_1_1CustomNonbondedForce_1a791f795c62309f0588c7cb183a8560cb" prot="private" static="no" mutable="no">
        <type><ref refid="classOpenMM_1_1CustomNonbondedForce_1aeaaa8a021f20549be459597f1ce87a8f" kindref="member">NonbondedMethod</ref></type>
        <definition>NonbondedMethod OpenMM::CustomNonbondedForce::nonbondedMethod</definition>
        <argsstring></argsstring>
        <name>nonbondedMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="524" column="21" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomNonbondedForce_1aac286c0dde879b182cb31e4bec8c45dd" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double OpenMM::CustomNonbondedForce::cutoffDistance</definition>
        <argsstring></argsstring>
        <name>cutoffDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="525" column="12" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomNonbondedForce_1a876c320e764d921d9f25bf1944586e1e" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double OpenMM::CustomNonbondedForce::switchingDistance</definition>
        <argsstring></argsstring>
        <name>switchingDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="525" column="27" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomNonbondedForce_1abf3ad596c9106c8062e0dcbcfdfb056a" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool OpenMM::CustomNonbondedForce::useSwitchingFunction</definition>
        <argsstring></argsstring>
        <name>useSwitchingFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="526" column="10" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomNonbondedForce_1a8da6fd995dad73e377c809060a7a4f48" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool OpenMM::CustomNonbondedForce::useLongRangeCorrection</definition>
        <argsstring></argsstring>
        <name>useLongRangeCorrection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="526" column="31" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomNonbondedForce_1ac70e571a2e88778c6453423f8ab12bb5" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string OpenMM::CustomNonbondedForce::energyExpression</definition>
        <argsstring></argsstring>
        <name>energyExpression</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="527" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="527" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomNonbondedForce_1a6d36a9047ae4dbf7ba2c72dc0b5ac7e8" prot="private" static="no" mutable="no">
        <type>std::vector&lt; PerParticleParameterInfo &gt;</type>
        <definition>std::vector&lt;PerParticleParameterInfo&gt; OpenMM::CustomNonbondedForce::parameters</definition>
        <argsstring></argsstring>
        <name>parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="528" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomNonbondedForce_1ae9ad747d88747c45f7f7514efffea869" prot="private" static="no" mutable="no">
        <type>std::vector&lt; GlobalParameterInfo &gt;</type>
        <definition>std::vector&lt;GlobalParameterInfo&gt; OpenMM::CustomNonbondedForce::globalParameters</definition>
        <argsstring></argsstring>
        <name>globalParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="529" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomNonbondedForce_1ae692577cb1ffd3dc78a3673ca8fda26e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; ParticleInfo &gt;</type>
        <definition>std::vector&lt;ParticleInfo&gt; OpenMM::CustomNonbondedForce::particles</definition>
        <argsstring></argsstring>
        <name>particles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="530" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomNonbondedForce_1a17c5c75683509da36972c37837a4feba" prot="private" static="no" mutable="no">
        <type>std::vector&lt; ExclusionInfo &gt;</type>
        <definition>std::vector&lt;ExclusionInfo&gt; OpenMM::CustomNonbondedForce::exclusions</definition>
        <argsstring></argsstring>
        <name>exclusions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="531" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomNonbondedForce_1acb62f6a6bb7d013036857d1d31a3a85c" prot="private" static="no" mutable="no">
        <type>std::vector&lt; FunctionInfo &gt;</type>
        <definition>std::vector&lt;FunctionInfo&gt; OpenMM::CustomNonbondedForce::functions</definition>
        <argsstring></argsstring>
        <name>functions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="532" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomNonbondedForce_1a0d41a89b67b4c5a6f3d7f7fcfdc17363" prot="private" static="no" mutable="no">
        <type>std::vector&lt; InteractionGroupInfo &gt;</type>
        <definition>std::vector&lt;InteractionGroupInfo&gt; OpenMM::CustomNonbondedForce::interactionGroups</definition>
        <argsstring></argsstring>
        <name>interactionGroups</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="533" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomNonbondedForce_1ab13036ce544484149cbdace5787827a7" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; OpenMM::CustomNonbondedForce::energyParameterDerivatives</definition>
        <argsstring></argsstring>
        <name>energyParameterDerivatives</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="534" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="534" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a143f5ccfd304c80af72d7fa2c0a3eae4" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>OpenMM::CustomNonbondedForce::CustomNonbondedForce</definition>
        <argsstring>(const std::string &amp;energy)</argsstring>
        <name>CustomNonbondedForce</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>energy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classOpenMM_1_1CustomNonbondedForce" kindref="compound">CustomNonbondedForce</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>energy</parametername>
</parameternamelist>
<parameterdescription>
<para>an algebraic expression giving the interaction energy between two particles as a function of r, the distance between them, as well as any global and per-particle parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="172" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1acf25a22e96241cb8036151e8d8afe24a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>OpenMM::CustomNonbondedForce::CustomNonbondedForce</definition>
        <argsstring>(const CustomNonbondedForce &amp;rhs)</argsstring>
        <name>CustomNonbondedForce</name>
        <param>
          <type>const <ref refid="classOpenMM_1_1CustomNonbondedForce" kindref="compound">CustomNonbondedForce</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="173" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a6979c22061ccdb229f84740404448851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>OpenMM::CustomNonbondedForce::~CustomNonbondedForce</definition>
        <argsstring>()</argsstring>
        <name>~CustomNonbondedForce</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="174" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1aa4a88b948b4111ef1e2c99d9a130d08a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomNonbondedForce::getNumParticles</definition>
        <argsstring>() const</argsstring>
        <name>getNumParticles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of particles for which force field parameters have been defined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="178" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a99f078564c3ec7ec46620a88fcd66751" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomNonbondedForce::getNumExclusions</definition>
        <argsstring>() const</argsstring>
        <name>getNumExclusions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of particle pairs whose interactions should be excluded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="184" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="184" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a7761f5832c486c122574f86df1cf8756" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomNonbondedForce::getNumPerParticleParameters</definition>
        <argsstring>() const</argsstring>
        <name>getNumPerParticleParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of per-particle parameters that the interaction depends on. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="190" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a87bf6dd2a01f5030edbc00bfcc483db3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomNonbondedForce::getNumGlobalParameters</definition>
        <argsstring>() const</argsstring>
        <name>getNumGlobalParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of global parameters that the interaction depends on. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="196" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="196" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1ab67b0a25dcfb0ece09a4d1f4e3f5847f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomNonbondedForce::getNumTabulatedFunctions</definition>
        <argsstring>() const</argsstring>
        <name>getNumTabulatedFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of tabulated functions that have been defined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="202" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a46fd6c6b5db88768cd261e0c685e8e50" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomNonbondedForce::getNumFunctions</definition>
        <argsstring>() const</argsstring>
        <name>getNumFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of tabulated functions that have been defined.</para>
<para><xrefsect id="deprecated_1_deprecated000014"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This method exists only for backward compatibility. Use <ref refid="classOpenMM_1_1CustomNonbondedForce_1ab67b0a25dcfb0ece09a4d1f4e3f5847f" kindref="member">getNumTabulatedFunctions()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="210" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a1fdfd38d79997dbe4d69dda7dc592d52" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomNonbondedForce::getNumInteractionGroups</definition>
        <argsstring>() const</argsstring>
        <name>getNumInteractionGroups</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of interaction groups that have been defined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="216" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="216" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a1c00cda5fc7e0d47074e5ca73dba3f16" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomNonbondedForce::getNumEnergyParameterDerivatives</definition>
        <argsstring>() const</argsstring>
        <name>getNumEnergyParameterDerivatives</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of global parameters with respect to which the derivative of the energy should be computed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="223" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="223" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1ac090e7c0ef7a954c9dece5a0959ea9be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; OpenMM::CustomNonbondedForce::getEnergyFunction</definition>
        <argsstring>() const</argsstring>
        <name>getEnergyFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the algebraic expression that gives the interaction energy between two particles </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="229" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a41987685c21dfa0196a7c53b3a352c40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::setEnergyFunction</definition>
        <argsstring>(const std::string &amp;energy)</argsstring>
        <name>setEnergyFunction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>energy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the algebraic expression that gives the interaction energy between two particles </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="233" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a62ccaec3e2cee9d71659670f5485a941" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1CustomNonbondedForce_1aeaaa8a021f20549be459597f1ce87a8f" kindref="member">NonbondedMethod</ref></type>
        <definition>NonbondedMethod OpenMM::CustomNonbondedForce::getNonbondedMethod</definition>
        <argsstring>() const</argsstring>
        <name>getNonbondedMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the method used for handling long range nonbonded interactions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="237" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a23afd01c66c17aa73f0038dcf234c606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::setNonbondedMethod</definition>
        <argsstring>(NonbondedMethod method)</argsstring>
        <name>setNonbondedMethod</name>
        <param>
          <type><ref refid="classOpenMM_1_1CustomNonbondedForce_1aeaaa8a021f20549be459597f1ce87a8f" kindref="member">NonbondedMethod</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the method used for handling long range nonbonded interactions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="241" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a10c26d823d32b879e7b8b3124eda6648" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double OpenMM::CustomNonbondedForce::getCutoffDistance</definition>
        <argsstring>() const</argsstring>
        <name>getCutoffDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.</para>
<para><simplesect kind="return"><para>the cutoff distance, measured in nm </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="248" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a58dcbe0a510f4305ddb5e2223200c257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::setCutoffDistance</definition>
        <argsstring>(double distance)</argsstring>
        <name>setCutoffDistance</name>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>the cutoff distance, measured in nm </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="255" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a58335aa395a834cfb8f51a1d761c425d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OpenMM::CustomNonbondedForce::getUseSwitchingFunction</definition>
        <argsstring>() const</argsstring>
        <name>getUseSwitchingFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get whether a switching function is applied to the interaction. If the nonbonded method is set to NoCutoff, this option is ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="260" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a976d682dac05500f3ed3661cbc159551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::setUseSwitchingFunction</definition>
        <argsstring>(bool use)</argsstring>
        <name>setUseSwitchingFunction</name>
        <param>
          <type>bool</type>
          <declname>use</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set whether a switching function is applied to the interaction. If the nonbonded method is set to NoCutoff, this option is ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="265" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1ad8a3a93b6255fed4d828a449b035d514" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double OpenMM::CustomNonbondedForce::getSwitchingDistance</definition>
        <argsstring>() const</argsstring>
        <name>getSwitchingDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the distance at which the switching function begins to reduce the interaction. This must be less than the cutoff distance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="270" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1ac7ec9b867665a2e6b708cd0d565a188c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::setSwitchingDistance</definition>
        <argsstring>(double distance)</argsstring>
        <name>setSwitchingDistance</name>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the distance at which the switching function begins to reduce the interaction. This must be less than the cutoff distance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="275" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a4265e88a90efb7257252953599ab7f0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OpenMM::CustomNonbondedForce::getUseLongRangeCorrection</definition>
        <argsstring>() const</argsstring>
        <name>getUseLongRangeCorrection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get whether to add a correction to the energy to compensate for the cutoff and switching function. This has no effect if periodic boundary conditions are not used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="280" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a24967bc31c6dbac9f84aac4ba784e540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::setUseLongRangeCorrection</definition>
        <argsstring>(bool use)</argsstring>
        <name>setUseLongRangeCorrection</name>
        <param>
          <type>bool</type>
          <declname>use</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set whether to add a correction to the energy to compensate for the cutoff and switching function. This has no effect if periodic boundary conditions are not used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="285" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a10fb22a057673d72c9d3e7f173a27c59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomNonbondedForce::addPerParticleParameter</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>addPerParticleParameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new per-particle parameter that the interaction may depend on.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the parameter that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="292" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1aa6a4c8ceaa6dd2f388728c71ebb08814" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; OpenMM::CustomNonbondedForce::getPerParticleParameterName</definition>
        <argsstring>(int index) const</argsstring>
        <name>getPerParticleParameterName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a per-particle parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to get the name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the parameter name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="299" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1af6b7d517318e2969dc276557375949a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::setPerParticleParameterName</definition>
        <argsstring>(int index, const std::string &amp;name)</argsstring>
        <name>setPerParticleParameterName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the name of a per-particle parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to set the name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="306" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a1584bbf0ae0c5f58742039df77d8cbb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomNonbondedForce::addGlobalParameter</definition>
        <argsstring>(const std::string &amp;name, double defaultValue)</argsstring>
        <name>addGlobalParameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new global parameter that the interaction may depend on. The default value provided to this method is the initial value of the parameter in newly created Contexts. You can change the value at any time by calling setParameter() on the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value of the parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the parameter that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="316" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a89135dda0b9fb1e20ac77969ee75e569" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; OpenMM::CustomNonbondedForce::getGlobalParameterName</definition>
        <argsstring>(int index) const</argsstring>
        <name>getGlobalParameterName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to get the name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the parameter name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="323" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a28629dd168467afbed7145ffffbb6a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::setGlobalParameterName</definition>
        <argsstring>(int index, const std::string &amp;name)</argsstring>
        <name>setGlobalParameterName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the name of a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to set the name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="330" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a5fabda5e4b74e28f79914a140c6f25be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double OpenMM::CustomNonbondedForce::getGlobalParameterDefaultValue</definition>
        <argsstring>(int index) const</argsstring>
        <name>getGlobalParameterDefaultValue</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the default value of a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to get the default value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the parameter default value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="337" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a93b034a2139f302d98b09bd150d62353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::setGlobalParameterDefaultValue</definition>
        <argsstring>(int index, double defaultValue)</argsstring>
        <name>setGlobalParameterDefaultValue</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the default value of a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to set the default value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value of the parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="344" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1ab08941c7fe07a3ffc53030080ceed7f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::addEnergyParameterDerivative</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>addEnergyParameterDerivative</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Request that this <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> compute the derivative of its energy with respect to a global parameter. The parameter must have already been added with <ref refid="classOpenMM_1_1CustomNonbondedForce_1a1584bbf0ae0c5f58742039df77d8cbb9" kindref="member">addGlobalParameter()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="351" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1accb6834a2b1a32a5273906171c41e97d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; OpenMM::CustomNonbondedForce::getEnergyParameterDerivativeName</definition>
        <argsstring>(int index) const</argsstring>
        <name>getEnergyParameterDerivativeName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a global parameter with respect to which this <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> should compute the derivative of the energy.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter derivative, between 0 and <ref refid="classOpenMM_1_1CustomNonbondedForce_1a1c00cda5fc7e0d47074e5ca73dba3f16" kindref="member">getNumEnergyParameterDerivatives()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the parameter name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="359" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a6260ec72aa5da61f69cc9ecba810d891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomNonbondedForce::addParticle</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;parameters=std::vector&lt; double &gt;())</argsstring>
        <name>addParticle</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>parameters</declname>
          <defval>std::vector&lt; double &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add the nonbonded force parameters for a particle. This should be called once for each particle in the <ref refid="classOpenMM_1_1System" kindref="compound">System</ref>. When it is called for the i&apos;th time, it specifies the parameters for the i&apos;th particle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of parameters for the new particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the particle that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="367" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1afcbccd55e341468b3fa9df4d489d35cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::getParticleParameters</definition>
        <argsstring>(int index, std::vector&lt; double &gt; &amp;parameters) const</argsstring>
        <name>getParticleParameters</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the nonbonded force parameters for a particle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the particle for which to get parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of parameters for the specified particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="374" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a133e3517ee6fb3da086612c1efc97d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::setParticleParameters</definition>
        <argsstring>(int index, const std::vector&lt; double &gt; &amp;parameters)</argsstring>
        <name>setParticleParameters</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the nonbonded force parameters for a particle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the particle for which to set parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of parameters for the specified particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="381" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1ad3759bd8ceef1d99a3bc733c2c54fb54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomNonbondedForce::addExclusion</definition>
        <argsstring>(int particle1, int particle2)</argsstring>
        <name>addExclusion</name>
        <param>
          <type>int</type>
          <declname>particle1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>particle2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a particle pair to the list of interactions that should be excluded.</para>
<para>In many cases, you can use <ref refid="classOpenMM_1_1CustomNonbondedForce_1a2c399a60e9517b14ffde6d6c39b412c4" kindref="member">createExclusionsFromBonds()</ref> rather than adding each exclusion explicitly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particle1</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the first particle in the pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particle2</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the second particle in the pair </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the exclusion that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="391" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a79d216c13ea40dcbff2f1f415695f18f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::getExclusionParticles</definition>
        <argsstring>(int index, int &amp;particle1, int &amp;particle2) const</argsstring>
        <name>getExclusionParticles</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>particle1</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>particle2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the particles in a pair whose interaction should be excluded.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the exclusion for which to get particle indices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">particle1</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the first particle in the pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">particle2</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the second particle in the pair </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="399" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a64fc1b0a33d8de6641e6d1035815f856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::setExclusionParticles</definition>
        <argsstring>(int index, int particle1, int particle2)</argsstring>
        <name>setExclusionParticles</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>particle1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>particle2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the particles in a pair whose interaction should be excluded.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the exclusion for which to set particle indices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particle1</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the first particle in the pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particle2</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the second particle in the pair </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="407" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a2c399a60e9517b14ffde6d6c39b412c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::createExclusionsFromBonds</definition>
        <argsstring>(const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;bonds, int bondCutoff)</argsstring>
        <name>createExclusionsFromBonds</name>
        <param>
          <type>const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;</type>
          <declname>bonds</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bondCutoff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Identify exclusions based on the molecular topology. Particles which are separated by up to a specified number of bonds are added as exclusions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bonds</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of bonds based on which to construct exclusions. Each element specifies the indices of two particles that are bonded to each other. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bondCutoff</parametername>
</parameternamelist>
<parameterdescription>
<para>pairs of particles that are separated by this many bonds or fewer are added to the list of exclusions </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="416" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1ac7c24d607916cca0d0980956de03cd15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomNonbondedForce::addTabulatedFunction</definition>
        <argsstring>(const std::string &amp;name, TabulatedFunction *function)</argsstring>
        <name>addTabulatedFunction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> *</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a tabulated function that may appear in the energy expression.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the function as it appears in expressions </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> object defining the function. The <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> should have been created on the heap with the &quot;new&quot; operator. The <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> takes over ownership of it, and deletes it when the <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> itself is deleted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the function that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="426" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a87f3462cfa3da9414a5e778a8448abbd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> &amp;</type>
        <definition>const TabulatedFunction &amp; OpenMM::CustomNonbondedForce::getTabulatedFunction</definition>
        <argsstring>(int index) const</argsstring>
        <name>getTabulatedFunction</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a const reference to a tabulated function that may appear in the energy expression.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the function to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> object defining the function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="433" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1ad20a573a181edb826ee81dbe917e54ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> &amp;</type>
        <definition>TabulatedFunction &amp; OpenMM::CustomNonbondedForce::getTabulatedFunction</definition>
        <argsstring>(int index)</argsstring>
        <name>getTabulatedFunction</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a reference to a tabulated function that may appear in the energy expression.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the function to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> object defining the function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="440" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a058caa4bca13bc5450f443463878899a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; OpenMM::CustomNonbondedForce::getTabulatedFunctionName</definition>
        <argsstring>(int index) const</argsstring>
        <name>getTabulatedFunctionName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a tabulated function that may appear in the energy expression.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the function to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the name of the function as it appears in expressions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="447" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a728b7c634e665b753249939007efd1a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomNonbondedForce::addFunction</definition>
        <argsstring>(const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</argsstring>
        <name>addFunction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a tabulated function that may appear in the energy expression.</para>
<para><xrefsect id="deprecated_1_deprecated000015"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This method exists only for backward compatibility. Use <ref refid="classOpenMM_1_1CustomNonbondedForce_1ac7c24d607916cca0d0980956de03cd15" kindref="member">addTabulatedFunction()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="453" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a5d4d46959b5bce422e460abea76ede01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::getFunctionParameters</definition>
        <argsstring>(int index, std::string &amp;name, std::vector&lt; double &gt; &amp;values, double &amp;min, double &amp;max) const</argsstring>
        <name>getFunctionParameters</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the parameters for a tabulated function that may appear in the energy expression.</para>
<para><xrefsect id="deprecated_1_deprecated000016"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This method exists only for backward compatibility. Use getTabulatedFunctionParameters() instead. If the specified function is not a <ref refid="classOpenMM_1_1Continuous1DFunction" kindref="compound">Continuous1DFunction</ref>, this throws an exception. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="460" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a7aedd5adf90d6229e51e60a83b647044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::setFunctionParameters</definition>
        <argsstring>(int index, const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</argsstring>
        <name>setFunctionParameters</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the parameters for a tabulated function that may appear in the energy expression.</para>
<para><xrefsect id="deprecated_1_deprecated000017"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This method exists only for backward compatibility. Use setTabulatedFunctionParameters() instead. If the specified function is not a <ref refid="classOpenMM_1_1Continuous1DFunction" kindref="compound">Continuous1DFunction</ref>, this throws an exception. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="467" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a2b806ec35ef4c4965deda83fe3be3540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomNonbondedForce::addInteractionGroup</definition>
        <argsstring>(const std::set&lt; int &gt; &amp;set1, const std::set&lt; int &gt; &amp;set2)</argsstring>
        <name>addInteractionGroup</name>
        <param>
          <type>const std::set&lt; int &gt; &amp;</type>
          <declname>set1</declname>
        </param>
        <param>
          <type>const std::set&lt; int &gt; &amp;</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an interaction group. An interaction will be computed between every particle in set1 and every particle in set2.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first set of particles forming the interaction group </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second set of particles forming the interaction group </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the interaction group that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="475" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a6ac2a24e9063a9fbed98dd65290d9810" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::getInteractionGroupParameters</definition>
        <argsstring>(int index, std::set&lt; int &gt; &amp;set1, std::set&lt; int &gt; &amp;set2) const</argsstring>
        <name>getInteractionGroupParameters</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>std::set&lt; int &gt; &amp;</type>
          <declname>set1</declname>
        </param>
        <param>
          <type>std::set&lt; int &gt; &amp;</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the parameters for an interaction group.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the interaction group for which to get parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">set1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first set of particles forming the interaction group </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">set2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second set of particles forming the interaction group </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="483" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a0e5ef821967a86382e8eb5fda4c35f17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::setInteractionGroupParameters</definition>
        <argsstring>(int index, const std::set&lt; int &gt; &amp;set1, const std::set&lt; int &gt; &amp;set2)</argsstring>
        <name>setInteractionGroupParameters</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::set&lt; int &gt; &amp;</type>
          <declname>set1</declname>
        </param>
        <param>
          <type>const std::set&lt; int &gt; &amp;</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the parameters for an interaction group.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the interaction group for which to set parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first set of particles forming the interaction group </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second set of particles forming the interaction group </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="491" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a642ebfd4353ec353205172a244003795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomNonbondedForce::updateParametersInContext</definition>
        <argsstring>(Context &amp;context)</argsstring>
        <name>updateParametersInContext</name>
        <param>
          <type><ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the per-particle parameters and tabulated functions in a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> to match those stored in this <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> object. This method provides an efficient method to update certain parameters in an existing <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> without needing to reinitialize it. Simply call <ref refid="classOpenMM_1_1CustomNonbondedForce_1a133e3517ee6fb3da086612c1efc97d1d" kindref="member">setParticleParameters()</ref> to modify this object&apos;s parameters, then call <ref refid="classOpenMM_1_1CustomNonbondedForce_1a642ebfd4353ec353205172a244003795" kindref="member">updateParametersInContext()</ref> to copy them over to the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>.</para>
<para>This method has several limitations. The only information it updates is the values of per-particle parameters and tabulated functions. All other aspects of the <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> (the energy function, nonbonded method, cutoff distance, etc.) are unaffected and can only be changed by reinitializing the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>. Also, this method cannot be used to add new particles, only to change the parameters of existing ones. While the tabulated values of a function can change, everything else about it (its dimensions, the data range) must not be changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="504" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1ab1247cfc637e558f79bb04cdd1c114a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool OpenMM::CustomNonbondedForce::usesPeriodicBoundaryConditions</definition>
        <argsstring>() const</argsstring>
        <name>usesPeriodicBoundaryConditions</name>
        <reimplements refid="classOpenMM_1_1Force_1a955afab55a1cd8b24cdf91258477237f">usesPeriodicBoundaryConditions</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether or not this force makes use of periodic boundary conditions.</para>
<para><simplesect kind="return"><para>true if force uses PBC and false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="511" column="10" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="511" bodyend="513"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classOpenMM_1_1CustomNonbondedForce_1a8e2f14f3f72dbe230895a7cf899c227c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ForceImpl *</type>
        <definition>ForceImpl * OpenMM::CustomNonbondedForce::createImpl</definition>
        <argsstring>() const</argsstring>
        <name>createImpl</name>
        <reimplements refid="classOpenMM_1_1Force_1a12dc4c2566ab670d47ef05bda169fa05">createImpl</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> is created, it invokes this method on each <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> in the <ref refid="classOpenMM_1_1System" kindref="compound">System</ref>. It should create a new ForceImpl object which can be used by the context for calculating forces. The ForceImpl will be deleted automatically when the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> is deleted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="515" column="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class implements nonbonded interactions between particles. Unlike <ref refid="classOpenMM_1_1NonbondedForce" kindref="compound">NonbondedForce</ref>, the functional form of the interaction is completely customizable, and may involve arbitrary algebraic expressions and tabulated functions. It may depend on the distance between particles, as well as on arbitrary global and per-particle parameters. It also optionally supports periodic boundary conditions and cutoffs for long range interactions.</para>
<para>To use this class, create a <ref refid="classOpenMM_1_1CustomNonbondedForce" kindref="compound">CustomNonbondedForce</ref> object, passing an algebraic expression to the constructor that defines the interaction energy between each pair of particles. The expression may depend on r, the distance between the particles, as well as on any parameters you choose. Then call <ref refid="classOpenMM_1_1CustomNonbondedForce_1a10fb22a057673d72c9d3e7f173a27c59" kindref="member">addPerParticleParameter()</ref> to define per-particle parameters, and <ref refid="classOpenMM_1_1CustomNonbondedForce_1a1584bbf0ae0c5f58742039df77d8cbb9" kindref="member">addGlobalParameter()</ref> to define global parameters. The values of per-particle parameters are specified as part of the system definition, while values of global parameters may be modified during a simulation by calling <ref refid="classOpenMM_1_1Context_1a368b7f53ee35bb151ee686441b7900af" kindref="member">Context::setParameter()</ref>.</para>
<para>Next, call <ref refid="classOpenMM_1_1CustomNonbondedForce_1a6260ec72aa5da61f69cc9ecba810d891" kindref="member">addParticle()</ref> once for each particle in the <ref refid="classOpenMM_1_1System" kindref="compound">System</ref> to set the values of its per-particle parameters. The number of particles for which you set parameters must be exactly equal to the number of particles in the <ref refid="classOpenMM_1_1System" kindref="compound">System</ref>, or else an exception will be thrown when you try to create a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>. After a particle has been added, you can modify its parameters by calling <ref refid="classOpenMM_1_1CustomNonbondedForce_1a133e3517ee6fb3da086612c1efc97d1d" kindref="member">setParticleParameters()</ref>. This will have no effect on Contexts that already exist unless you call <ref refid="classOpenMM_1_1CustomNonbondedForce_1a642ebfd4353ec353205172a244003795" kindref="member">updateParametersInContext()</ref>.</para>
<para><ref refid="classOpenMM_1_1CustomNonbondedForce" kindref="compound">CustomNonbondedForce</ref> also lets you specify &quot;exclusions&quot;, particular pairs of particles whose interactions should be omitted from force and energy calculations. This is most often used for particles that are bonded to each other.</para>
<para>As an example, the following code creates a <ref refid="classOpenMM_1_1CustomNonbondedForce" kindref="compound">CustomNonbondedForce</ref> that implements a 12-6 Lennard-Jones potential:</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    CustomNonbondedForce* force = new CustomNonbondedForce(&quot;4*epsilon*((sigma/r)^12-(sigma/r)^6); sigma=0.5*(sigma1+sigma2); epsilon=sqrt(epsilon1*epsilon2)&quot;);
*
* </verbatim></para>
<para>This force depends on two parameters: sigma and epsilon. The following code defines these as per-particle parameters:</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    force-&gt;addPerParticleParameter(&quot;sigma&quot;);
*    force-&gt;addPerParticleParameter(&quot;epsilon&quot;);
*
* </verbatim></para>
<para>The expression <emphasis>must</emphasis> be symmetric with respect to the two particles. It typically will only be evaluated once for each pair of particles, and no guarantee is made about which particle will be identified as &quot;particle 1&quot;. In the above example, the energy only depends on the products sigma1*sigma2 and epsilon1*epsilon2, both of which are unchanged if the labels 1 and 2 are reversed. In contrast, if it depended on the difference sigma1-sigma2, the results would be undefined, because reversing the labels 1 and 2 would change the energy.</para>
<para><ref refid="classOpenMM_1_1CustomNonbondedForce" kindref="compound">CustomNonbondedForce</ref> can operate in two modes. By default, it computes the interaction of every particle in the <ref refid="classOpenMM_1_1System" kindref="compound">System</ref> with every other particle. Alternatively, you can restrict it to only a subset of particle pairs. To do this, specify one or more &quot;interaction groups&quot;. An interaction group consists of two sets of particles that should interact with each other. Every particle in the first set interacts with every particle in the second set. For example, you might use this feature to compute a solute-solvent interaction energy, while omitting all interactions between two solute atoms or two solvent atoms.</para>
<para>To create an interaction group, call <ref refid="classOpenMM_1_1CustomNonbondedForce_1a2b806ec35ef4c4965deda83fe3be3540" kindref="member">addInteractionGroup()</ref>. You may add as many interaction groups as you want. Be aware of the following:</para>
<para><itemizedlist>
<listitem>
<para>Exclusions are still taken into account, so the interactions between excluded pairs are omitted. </para>
</listitem>
<listitem>
<para>Likewise, a particle will never interact with itself, even if it appears in both sets of an interaction group. </para>
</listitem>
<listitem>
<para>If a particle pair appears in two different interaction groups, its interaction will be computed twice. This is sometimes useful, but be aware of it so you do not accidentally create unwanted duplicate interactions. </para>
</listitem>
<listitem>
<para>If you do not add any interaction groups to a <ref refid="classOpenMM_1_1CustomNonbondedForce" kindref="compound">CustomNonbondedForce</ref>, it operates in the default mode where every particle interacts with every other particle. </para>
</listitem>
</itemizedlist>
</para>
<para>When using a cutoff, by default the interaction is sharply truncated at the cutoff distance. Optionally you can instead use a switching function to make the interaction smoothly go to zero over a finite distance range. To enable this, call <ref refid="classOpenMM_1_1CustomNonbondedForce_1a976d682dac05500f3ed3661cbc159551" kindref="member">setUseSwitchingFunction()</ref>. You must also call <ref refid="classOpenMM_1_1CustomNonbondedForce_1ac7ec9b867665a2e6b708cd0d565a188c" kindref="member">setSwitchingDistance()</ref> to specify the distance at which the interaction should begin to decrease. The switching distance must be less than the cutoff distance. Of course, you could also incorporate the switching function directly into your energy expression, but there are several advantages to keeping it separate. It makes your energy expression simpler to write and understand. It allows you to use the same energy expression with or without a cutoff. Also, when using a long range correction (see below), separating out the switching function allows the correction to be calculated more accurately.</para>
<para>Another optional feature of this class is to add a contribution to the energy which approximates the effect of all interactions beyond the cutoff in a periodic system. When running a simulation at constant pressure, this can improve the quality of the result. Call <ref refid="classOpenMM_1_1CustomNonbondedForce_1a24967bc31c6dbac9f84aac4ba784e540" kindref="member">setUseLongRangeCorrection()</ref> to enable it.</para>
<para>Computing the long range correction takes negligible work in each time step, but it does require an expensive precomputation at the start of the simulation. Furthermore, that precomputation must be repeated every time a global parameter changes (or when you modify per-particle parameters by calling <ref refid="classOpenMM_1_1CustomNonbondedForce_1a642ebfd4353ec353205172a244003795" kindref="member">updateParametersInContext()</ref>). This means that if parameters change frequently, the long range correction can be very slow. For this reason, it is disabled by default.</para>
<para>This class also has the ability to compute derivatives of the potential energy with respect to global parameters. Call <ref refid="classOpenMM_1_1CustomNonbondedForce_1ab08941c7fe07a3ffc53030080ceed7f6" kindref="member">addEnergyParameterDerivative()</ref> to request that the derivative with respect to a particular parameter be computed. You can then query its value in a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> by calling getState() on it.</para>
<para>Expressions may involve the operators + (add), - (subtract), * (multiply), / (divide), and ^ (power), and the following functions: sqrt, exp, log, sin, cos, sec, csc, tan, cot, asin, acos, atan, atan2, sinh, cosh, tanh, erf, erfc, min, max, abs, floor, ceil, step, delta, select. All trigonometric functions are defined in radians, and log is the natural logarithm. step(x) = 0 if x is less than 0, 1 otherwise. delta(x) = 1 if x is 0, 0 otherwise. select(x,y,z) = z if x = 0, y otherwise. The names of per-particle parameters have the suffix &quot;1&quot; or &quot;2&quot; appended to them to indicate the values for the two interacting particles. As seen in the above example, the expression may also involve intermediate quantities that are defined following the main expression, using &quot;;&quot; as a separator.</para>
<para>In addition, you can call <ref refid="classOpenMM_1_1CustomNonbondedForce_1ac7c24d607916cca0d0980956de03cd15" kindref="member">addTabulatedFunction()</ref> to define a new function based on tabulated values. You specify the function by creating a <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> object. That function can then appear in the expression. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>OpenMM::CustomNonbondedForce</label>
        <link refid="classOpenMM_1_1CustomNonbondedForce"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>OpenMM::Force</label>
        <link refid="classOpenMM_1_1Force"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>OpenMM::CustomNonbondedForce</label>
        <link refid="classOpenMM_1_1CustomNonbondedForce"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>OpenMM::Force</label>
        <link refid="classOpenMM_1_1Force"/>
      </node>
    </collaborationgraph>
    <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" line="145" column="1" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomNonbondedForce.h" bodystart="145" bodyend="535"/>
    <listofallmembers>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1ab08941c7fe07a3ffc53030080ceed7f6" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>addEnergyParameterDerivative</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1ad3759bd8ceef1d99a3bc733c2c54fb54" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>addExclusion</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a728b7c634e665b753249939007efd1a8" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>addFunction</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a1584bbf0ae0c5f58742039df77d8cbb9" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>addGlobalParameter</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a2b806ec35ef4c4965deda83fe3be3540" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>addInteractionGroup</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a6260ec72aa5da61f69cc9ecba810d891" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>addParticle</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a10fb22a057673d72c9d3e7f173a27c59" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>addPerParticleParameter</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1ac7c24d607916cca0d0980956de03cd15" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>addTabulatedFunction</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a2c399a60e9517b14ffde6d6c39b412c4" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>createExclusionsFromBonds</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a8e2f14f3f72dbe230895a7cf899c227c" prot="protected" virt="virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>createImpl</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a143f5ccfd304c80af72d7fa2c0a3eae4" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>CustomNonbondedForce</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1acf25a22e96241cb8036151e8d8afe24a" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>CustomNonbondedForce</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1aac286c0dde879b182cb31e4bec8c45dd" prot="private" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>cutoffDistance</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1aeaaa8a021f20549be459597f1ce87a8fad934e3d58ed39dcb6e7e16eb851c1a8d" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>CutoffNonPeriodic</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1aeaaa8a021f20549be459597f1ce87a8fa351b557a382884ce52e19b4d39410971" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>CutoffPeriodic</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1ac70e571a2e88778c6453423f8ab12bb5" prot="private" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>energyExpression</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1ab13036ce544484149cbdace5787827a7" prot="private" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>energyParameterDerivatives</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a17c5c75683509da36972c37837a4feba" prot="private" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>exclusions</name></member>
      <member refid="classOpenMM_1_1Force_1a40e75e251ec93d3bc9fc87b96026fbc2" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>Force</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1acb62f6a6bb7d013036857d1d31a3a85c" prot="private" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>functions</name></member>
      <member refid="classOpenMM_1_1Force_1a152bbe8e42e036e697b587c0832e233b" prot="protected" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getContextImpl</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a10c26d823d32b879e7b8b3124eda6648" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getCutoffDistance</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1ac090e7c0ef7a954c9dece5a0959ea9be" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getEnergyFunction</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1accb6834a2b1a32a5273906171c41e97d" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getEnergyParameterDerivativeName</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a79d216c13ea40dcbff2f1f415695f18f" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getExclusionParticles</name></member>
      <member refid="classOpenMM_1_1Force_1ab9428f8447cba02d548963242dd674ff" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getForceGroup</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a5d4d46959b5bce422e460abea76ede01" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getFunctionParameters</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a5fabda5e4b74e28f79914a140c6f25be" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getGlobalParameterDefaultValue</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a89135dda0b9fb1e20ac77969ee75e569" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getGlobalParameterName</name></member>
      <member refid="classOpenMM_1_1Force_1aef442934a17134fe13f5dcc40ada7b11" prot="protected" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getImplInContext</name></member>
      <member refid="classOpenMM_1_1Force_1a1af3134b705088bd8ed5b6e7521db43d" prot="protected" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getImplInContext</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a6ac2a24e9063a9fbed98dd65290d9810" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getInteractionGroupParameters</name></member>
      <member refid="classOpenMM_1_1Force_1a479fe60e5fe8e344109f794ecd7b7bab" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getName</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a62ccaec3e2cee9d71659670f5485a941" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getNonbondedMethod</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a1c00cda5fc7e0d47074e5ca73dba3f16" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getNumEnergyParameterDerivatives</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a99f078564c3ec7ec46620a88fcd66751" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getNumExclusions</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a46fd6c6b5db88768cd261e0c685e8e50" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getNumFunctions</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a87bf6dd2a01f5030edbc00bfcc483db3" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getNumGlobalParameters</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a1fdfd38d79997dbe4d69dda7dc592d52" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getNumInteractionGroups</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1aa4a88b948b4111ef1e2c99d9a130d08a" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getNumParticles</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a7761f5832c486c122574f86df1cf8756" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getNumPerParticleParameters</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1ab67b0a25dcfb0ece09a4d1f4e3f5847f" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getNumTabulatedFunctions</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1afcbccd55e341468b3fa9df4d489d35cf" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getParticleParameters</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1aa6a4c8ceaa6dd2f388728c71ebb08814" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getPerParticleParameterName</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1ad8a3a93b6255fed4d828a449b035d514" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getSwitchingDistance</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a87f3462cfa3da9414a5e778a8448abbd" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getTabulatedFunction</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1ad20a573a181edb826ee81dbe917e54ad" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getTabulatedFunction</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a058caa4bca13bc5450f443463878899a" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getTabulatedFunctionName</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a4265e88a90efb7257252953599ab7f0d" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getUseLongRangeCorrection</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a58335aa395a834cfb8f51a1d761c425d" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>getUseSwitchingFunction</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1ae9ad747d88747c45f7f7514efffea869" prot="private" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>globalParameters</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a0d41a89b67b4c5a6f3d7f7fcfdc17363" prot="private" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>interactionGroups</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1aeaaa8a021f20549be459597f1ce87a8fa062bd34990d0b5b0de303e8b26315c7c" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>NoCutoff</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1aeaaa8a021f20549be459597f1ce87a8f" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>NonbondedMethod</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a791f795c62309f0588c7cb183a8560cb" prot="private" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>nonbondedMethod</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a6d36a9047ae4dbf7ba2c72dc0b5ac7e8" prot="private" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>parameters</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1ae692577cb1ffd3dc78a3673ca8fda26e" prot="private" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>particles</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a58dcbe0a510f4305ddb5e2223200c257" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>setCutoffDistance</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a41987685c21dfa0196a7c53b3a352c40" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>setEnergyFunction</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a64fc1b0a33d8de6641e6d1035815f856" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>setExclusionParticles</name></member>
      <member refid="classOpenMM_1_1Force_1a53e3829a91825a9f6aa17e5ade713f84" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>setForceGroup</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a7aedd5adf90d6229e51e60a83b647044" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>setFunctionParameters</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a93b034a2139f302d98b09bd150d62353" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>setGlobalParameterDefaultValue</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a28629dd168467afbed7145ffffbb6a81" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>setGlobalParameterName</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a0e5ef821967a86382e8eb5fda4c35f17" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>setInteractionGroupParameters</name></member>
      <member refid="classOpenMM_1_1Force_1ac0a383a4d4203427652f1ad5b2528215" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>setName</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a23afd01c66c17aa73f0038dcf234c606" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>setNonbondedMethod</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a133e3517ee6fb3da086612c1efc97d1d" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>setParticleParameters</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1af6b7d517318e2969dc276557375949a6" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>setPerParticleParameterName</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1ac7ec9b867665a2e6b708cd0d565a188c" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>setSwitchingDistance</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a24967bc31c6dbac9f84aac4ba784e540" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>setUseLongRangeCorrection</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a976d682dac05500f3ed3661cbc159551" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>setUseSwitchingFunction</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a876c320e764d921d9f25bf1944586e1e" prot="private" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>switchingDistance</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a642ebfd4353ec353205172a244003795" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>updateParametersInContext</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a8da6fd995dad73e377c809060a7a4f48" prot="private" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>useLongRangeCorrection</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1ab1247cfc637e558f79bb04cdd1c114a0" prot="public" virt="virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>usesPeriodicBoundaryConditions</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1abf3ad596c9106c8062e0dcbcfdfb056a" prot="private" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>useSwitchingFunction</name></member>
      <member refid="classOpenMM_1_1CustomNonbondedForce_1a6979c22061ccdb229f84740404448851" prot="public" virt="non-virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>~CustomNonbondedForce</name></member>
      <member refid="classOpenMM_1_1Force_1a6516b32ebeb95a694f56d93bdf81f4fb" prot="public" virt="virtual"><scope>OpenMM::CustomNonbondedForce</scope><name>~Force</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
