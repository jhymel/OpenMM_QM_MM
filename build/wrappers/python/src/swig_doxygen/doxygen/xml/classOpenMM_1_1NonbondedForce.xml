<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classOpenMM_1_1NonbondedForce" kind="class" language="C++" prot="public">
    <compoundname>OpenMM::NonbondedForce</compoundname>
    <basecompoundref refid="classOpenMM_1_1Force" prot="public" virt="non-virtual">OpenMM::Force</basecompoundref>
    <includes refid="NonbondedForce_8h" local="no">NonbondedForce.h</includes>
    <innerclass refid="classOpenMM_1_1NonbondedForce_1_1ExceptionInfo" prot="private">OpenMM::NonbondedForce::ExceptionInfo</innerclass>
    <innerclass refid="classOpenMM_1_1NonbondedForce_1_1ExceptionOffsetInfo" prot="private">OpenMM::NonbondedForce::ExceptionOffsetInfo</innerclass>
    <innerclass refid="classOpenMM_1_1NonbondedForce_1_1GlobalParameterInfo" prot="private">OpenMM::NonbondedForce::GlobalParameterInfo</innerclass>
    <innerclass refid="classOpenMM_1_1NonbondedForce_1_1ParticleInfo" prot="private">OpenMM::NonbondedForce::ParticleInfo</innerclass>
    <innerclass refid="classOpenMM_1_1NonbondedForce_1_1ParticleOffsetInfo" prot="private">OpenMM::NonbondedForce::ParticleOffsetInfo</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cf" prot="public" static="no" strong="no">
        <type></type>
        <name>NonbondedMethod</name>
        <enumvalue id="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cfad13dd4bb7d9867b3c187d076c88f8bb4" prot="public">
          <name>NoCutoff</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No cutoff is applied to nonbonded interactions. The full set of N^2 interactions is computed exactly. This necessarily means that periodic boundary conditions cannot be used. This is the default. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cfa8e12125ec7af9da6713afc75cb656356" prot="public">
          <name>CutoffNonPeriodic</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interactions beyond the cutoff distance are ignored. Coulomb interactions closer than the cutoff distance are modified using the reaction field method. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cfa389cc9c1d32af482704d7256c9a1d033" prot="public">
          <name>CutoffPeriodic</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Periodic boundary conditions are used, so that each particle interacts only with the nearest periodic copy of each other particle. Interactions beyond the cutoff distance are ignored. Coulomb interactions closer than the cutoff distance are modified using the reaction field method. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cfaea30fd2b3e9e87cff3ff0a3cfaa4f07f" prot="public">
          <name>Ewald</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Periodic boundary conditions are used, and Ewald summation is used to compute the Coulomb interaction of each particle with all periodic copies of every other particle. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cfa2280137f402d5f75307e2774793e7483" prot="public">
          <name>PME</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Periodic boundary conditions are used, and Particle-Mesh Ewald (PME) summation is used to compute the Coulomb interaction of each particle with all periodic copies of every other particle. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cfa7281e0712cf4d8ad1226be1c2c3b042b" prot="public">
          <name>LJPME</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Periodic boundary conditions are used, and Particle-Mesh Ewald (PME) summation is used to compute the interaction of each particle with all periodic copies of every other particle for both Coulomb and Lennard-Jones. No switching is used for either interaction. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an enumeration of the different methods that may be used for handling long range nonbonded forces. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="116" column="5" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="116" bodyend="148"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a2e57d9abdb595003e1457f45b93f3cb7" prot="private" static="no" mutable="no">
        <type><ref refid="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cf" kindref="member">NonbondedMethod</ref></type>
        <definition>NonbondedMethod OpenMM::NonbondedForce::nonbondedMethod</definition>
        <argsstring></argsstring>
        <name>nonbondedMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="620" column="21" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a85b54690c6c0e8e9d0636e7b590edae1" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double OpenMM::NonbondedForce::cutoffDistance</definition>
        <argsstring></argsstring>
        <name>cutoffDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="621" column="12" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a2a4da8513ec3c1fdd5b0928d310a92dd" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double OpenMM::NonbondedForce::switchingDistance</definition>
        <argsstring></argsstring>
        <name>switchingDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="621" column="27" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a5dce92c7ba2aa8036eab320dd011fd69" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double OpenMM::NonbondedForce::rfDielectric</definition>
        <argsstring></argsstring>
        <name>rfDielectric</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="621" column="45" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a51785250c8086c2d7c9d7a7f84ff747f" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double OpenMM::NonbondedForce::ewaldErrorTol</definition>
        <argsstring></argsstring>
        <name>ewaldErrorTol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="621" column="58" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a5451ec919cff5efea3d02688290194d2" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double OpenMM::NonbondedForce::alpha</definition>
        <argsstring></argsstring>
        <name>alpha</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="621" column="72" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a9c801e16de3b25ee87288ccee6b9f346" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double OpenMM::NonbondedForce::dalpha</definition>
        <argsstring></argsstring>
        <name>dalpha</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="621" column="78" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a864995e07e9d3de591f8200f308419da" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool OpenMM::NonbondedForce::useSwitchingFunction</definition>
        <argsstring></argsstring>
        <name>useSwitchingFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="622" column="10" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a4ef85ce25928e382ca5f6e92383dfecf" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool OpenMM::NonbondedForce::useDispersionCorrection</definition>
        <argsstring></argsstring>
        <name>useDispersionCorrection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="622" column="31" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a69076eea17285cd3d0441dc3ecdf0029" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool OpenMM::NonbondedForce::exceptionsUsePeriodic</definition>
        <argsstring></argsstring>
        <name>exceptionsUsePeriodic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="622" column="55" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a9f08d6f95d3ec8149109bc9a611080a7" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool OpenMM::NonbondedForce::includeDirectSpace</definition>
        <argsstring></argsstring>
        <name>includeDirectSpace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="622" column="77" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a551a1e6e578c73ea43059cde712d005f" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::recipForceGroup</definition>
        <argsstring></argsstring>
        <name>recipForceGroup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="623" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a3cc0a6003afe8422bcbdba89057f2e14" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::nx</definition>
        <argsstring></argsstring>
        <name>nx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="623" column="25" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a460647d77d90c705741858deda1390c5" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::ny</definition>
        <argsstring></argsstring>
        <name>ny</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="623" column="28" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1adc2f6d6adfcd6fec50eb6d1fb315713a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::nz</definition>
        <argsstring></argsstring>
        <name>nz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="623" column="31" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a7bf0c33ab8bccac266cd8ccc48e31ee9" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::dnx</definition>
        <argsstring></argsstring>
        <name>dnx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="623" column="34" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a185e8a65fa1c3eef829f51963af63d25" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::dny</definition>
        <argsstring></argsstring>
        <name>dny</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="623" column="38" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1af85f3721a193e94d364fa93526838bbf" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::dnz</definition>
        <argsstring></argsstring>
        <name>dnz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="623" column="42" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a75ba047ccfc961127ba91acdbc90b132" prot="private" static="no" mutable="no">
        <type>std::vector&lt; ParticleInfo &gt;</type>
        <definition>std::vector&lt;ParticleInfo&gt; OpenMM::NonbondedForce::particles</definition>
        <argsstring></argsstring>
        <name>particles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="626" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="626" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a967bc337b632cfb47617247f53bbf588" prot="private" static="no" mutable="no">
        <type>std::vector&lt; ExceptionInfo &gt;</type>
        <definition>std::vector&lt;ExceptionInfo&gt; OpenMM::NonbondedForce::exceptions</definition>
        <argsstring></argsstring>
        <name>exceptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="627" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1adba95a25b71df286aa18d293f1fc8ece" prot="private" static="no" mutable="no">
        <type>std::vector&lt; GlobalParameterInfo &gt;</type>
        <definition>std::vector&lt;GlobalParameterInfo&gt; OpenMM::NonbondedForce::globalParameters</definition>
        <argsstring></argsstring>
        <name>globalParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="628" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a9baf7fb170eff3a02951aa9a00203733" prot="private" static="no" mutable="no">
        <type>std::vector&lt; ParticleOffsetInfo &gt;</type>
        <definition>std::vector&lt;ParticleOffsetInfo&gt; OpenMM::NonbondedForce::particleOffsets</definition>
        <argsstring></argsstring>
        <name>particleOffsets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="629" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a55ba20e377c1bd6baf2820c274dfc7f2" prot="private" static="no" mutable="no">
        <type>std::vector&lt; ExceptionOffsetInfo &gt;</type>
        <definition>std::vector&lt;ExceptionOffsetInfo&gt; OpenMM::NonbondedForce::exceptionOffsets</definition>
        <argsstring></argsstring>
        <name>exceptionOffsets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="630" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1NonbondedForce_1a1c53886bad57c2ca0f36dd55350e6d51" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::pair&lt; int, int &gt;, int &gt;</type>
        <definition>std::map&lt;std::pair&lt;int, int&gt;, int&gt; OpenMM::NonbondedForce::exceptionMap</definition>
        <argsstring></argsstring>
        <name>exceptionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="631" column="14" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="631" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a6f390de4b2cde360e67f077aa5cf6ba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>OpenMM::NonbondedForce::NonbondedForce</definition>
        <argsstring>()</argsstring>
        <name>NonbondedForce</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classOpenMM_1_1NonbondedForce" kindref="compound">NonbondedForce</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="152" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a9f02c65d61e3a9f4248eaef3a96a708a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::getNumParticles</definition>
        <argsstring>() const</argsstring>
        <name>getNumParticles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of particles for which force field parameters have been defined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="156" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a2c5a2ad8054163dbaf54e042a8090f59" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::getNumExceptions</definition>
        <argsstring>() const</argsstring>
        <name>getNumExceptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of special interactions that should be calculated differently from other interactions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="162" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a48d08f458f4062eec514ec6b3adc107a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::getNumGlobalParameters</definition>
        <argsstring>() const</argsstring>
        <name>getNumGlobalParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of global parameters that have been added. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="168" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a5bfc5bc00db21e296d8f61a395b7a227" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::getNumParticleParameterOffsets</definition>
        <argsstring>() const</argsstring>
        <name>getNumParticleParameterOffsets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of particles parameter offsets that have been added. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="174" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a3d3cb0abab0a37abff692c6c692280c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::getNumExceptionParameterOffsets</definition>
        <argsstring>() const</argsstring>
        <name>getNumExceptionParameterOffsets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of exception parameter offsets that have been added. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="180" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a66a51e5804f0117cba1c7d904384c319" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cf" kindref="member">NonbondedMethod</ref></type>
        <definition>NonbondedMethod OpenMM::NonbondedForce::getNonbondedMethod</definition>
        <argsstring>() const</argsstring>
        <name>getNonbondedMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the method used for handling long range nonbonded interactions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="186" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a0960e96d830494ccb308e30269f9a380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setNonbondedMethod</definition>
        <argsstring>(NonbondedMethod method)</argsstring>
        <name>setNonbondedMethod</name>
        <param>
          <type><ref refid="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cf" kindref="member">NonbondedMethod</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the method used for handling long range nonbonded interactions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="190" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a083f2ffa8d39bc871e209a305219004a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double OpenMM::NonbondedForce::getCutoffDistance</definition>
        <argsstring>() const</argsstring>
        <name>getCutoffDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.</para>
<para><simplesect kind="return"><para>the cutoff distance, measured in nm </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="197" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a053d15e3e3e9157a54eadbb84df746e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setCutoffDistance</definition>
        <argsstring>(double distance)</argsstring>
        <name>setCutoffDistance</name>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>the cutoff distance, measured in nm </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="204" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a3e2e6cf8904b0be32d262081c87815f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OpenMM::NonbondedForce::getUseSwitchingFunction</definition>
        <argsstring>() const</argsstring>
        <name>getUseSwitchingFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get whether a switching function is applied to the Lennard-Jones interaction. If the nonbonded method is set to NoCutoff, this option is ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="209" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a7853d829222ad74226b03cfd70ab126b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setUseSwitchingFunction</definition>
        <argsstring>(bool use)</argsstring>
        <name>setUseSwitchingFunction</name>
        <param>
          <type>bool</type>
          <declname>use</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set whether a switching function is applied to the Lennard-Jones interaction. If the nonbonded method is set to NoCutoff, this option is ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="214" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a547c37d1ca91d369b0d10894dd481130" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double OpenMM::NonbondedForce::getSwitchingDistance</definition>
        <argsstring>() const</argsstring>
        <name>getSwitchingDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the distance at which the switching function begins to reduce the Lennard-Jones interaction. This must be less than the cutoff distance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="219" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a613f3d52e7cc6378964081b3a4bb440a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setSwitchingDistance</definition>
        <argsstring>(double distance)</argsstring>
        <name>setSwitchingDistance</name>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the distance at which the switching function begins to reduce the Lennard-Jones interaction. This must be less than the cutoff distance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="224" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a958d15eb53b2bb274e28b3fb7528b4ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double OpenMM::NonbondedForce::getReactionFieldDielectric</definition>
        <argsstring>() const</argsstring>
        <name>getReactionFieldDielectric</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the dielectric constant to use for the solvent in the reaction field approximation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="228" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a085d74a071bc3a25124da475a87b0a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setReactionFieldDielectric</definition>
        <argsstring>(double dielectric)</argsstring>
        <name>setReactionFieldDielectric</name>
        <param>
          <type>double</type>
          <declname>dielectric</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the dielectric constant to use for the solvent in the reaction field approximation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="232" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a3589630c15b7d0f31a8d06253413c2a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double OpenMM::NonbondedForce::getEwaldErrorTolerance</definition>
        <argsstring>() const</argsstring>
        <name>getEwaldErrorTolerance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the error tolerance for Ewald summation. This corresponds to the fractional error in the forces which is acceptable. This value is used to select the reciprocal space cutoff and separation parameter so that the average error level will be less than the tolerance. There is not a rigorous guarantee that all forces on all atoms will be less than the tolerance, however.</para>
<para>For PME calculations, if <ref refid="classOpenMM_1_1NonbondedForce_1aabeb540e82431acab693da4d1d5b98c7" kindref="member">setPMEParameters()</ref> is used to set alpha to something other than 0, this value is ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="242" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1ab96787c5558d1a6df37888bbd2aa7258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setEwaldErrorTolerance</definition>
        <argsstring>(double tol)</argsstring>
        <name>setEwaldErrorTolerance</name>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the error tolerance for Ewald summation. This corresponds to the fractional error in the forces which is acceptable. This value is used to select the reciprocal space cutoff and separation parameter so that the average error level will be less than the tolerance. There is not a rigorous guarantee that all forces on all atoms will be less than the tolerance, however.</para>
<para>For PME calculations, if <ref refid="classOpenMM_1_1NonbondedForce_1aabeb540e82431acab693da4d1d5b98c7" kindref="member">setPMEParameters()</ref> is used to set alpha to something other than 0, this value is ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="252" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a1c14d3e3fd6df7e15930d1c34270a222" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::getPMEParameters</definition>
        <argsstring>(double &amp;alpha, int &amp;nx, int &amp;ny, int &amp;nz) const</argsstring>
        <name>getPMEParameters</name>
        <param>
          <type>double &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the parameters to use for PME calculations. If alpha is 0 (the default), these parameters are ignored and instead their values are chosen based on the Ewald error tolerance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>the separation parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">nx</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grid points along the X axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ny</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grid points along the Y axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">nz</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grid points along the Z axis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="262" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1ab32d08590357b83bf447ffc9814742dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::getLJPMEParameters</definition>
        <argsstring>(double &amp;alpha, int &amp;nx, int &amp;ny, int &amp;nz) const</argsstring>
        <name>getLJPMEParameters</name>
        <param>
          <type>double &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the parameters to use for dispersion term in LJ-PME calculations. If alpha is 0 (the default), these parameters are ignored and instead their values are chosen based on the Ewald error tolerance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>the separation parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">nx</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of dispersion grid points along the X axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ny</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of dispersion grid points along the Y axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">nz</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of dispersion grid points along the Z axis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="272" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1aabeb540e82431acab693da4d1d5b98c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setPMEParameters</definition>
        <argsstring>(double alpha, int nx, int ny, int nz)</argsstring>
        <name>setPMEParameters</name>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the parameters to use for PME calculations. If alpha is 0 (the default), these parameters are ignored and instead their values are chosen based on the Ewald error tolerance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>the separation parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nx</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grid points along the X axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ny</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grid points along the Y axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nz</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grid points along the Z axis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="282" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a3946ce0b153cb08fe756ed19ee83e8ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setLJPMEParameters</definition>
        <argsstring>(double alpha, int nx, int ny, int nz)</argsstring>
        <name>setLJPMEParameters</name>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the parameters to use for the dispersion term in LJPME calculations. If alpha is 0 (the default), these parameters are ignored and instead their values are chosen based on the Ewald error tolerance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>the separation parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nx</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grid points along the X axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ny</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grid points along the Y axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nz</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grid points along the Z axis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="292" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a33982b0b3390da1ee2f2087c4d2c0ccd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::getPMEParametersInContext</definition>
        <argsstring>(const Context &amp;context, double &amp;alpha, int &amp;nx, int &amp;ny, int &amp;nz) const</argsstring>
        <name>getPMEParametersInContext</name>
        <param>
          <type>const <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the parameters being used for PME in a particular <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>. Because some platforms have restrictions on the allowed grid sizes, the values that are actually used may be slightly different from those specified with <ref refid="classOpenMM_1_1NonbondedForce_1aabeb540e82431acab693da4d1d5b98c7" kindref="member">setPMEParameters()</ref>, or the standard values calculated based on the Ewald error tolerance. See the manual for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> for which to get the parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>the separation parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">nx</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grid points along the X axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ny</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grid points along the Y axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">nz</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grid points along the Z axis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="305" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1adf64ffba9efe4512233283b90563a5b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::getLJPMEParametersInContext</definition>
        <argsstring>(const Context &amp;context, double &amp;alpha, int &amp;nx, int &amp;ny, int &amp;nz) const</argsstring>
        <name>getLJPMEParametersInContext</name>
        <param>
          <type>const <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the PME parameters being used for the dispersion term for LJPME in a particular <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>. Because some platforms have restrictions on the allowed grid sizes, the values that are actually used may be slightly different from those specified with <ref refid="classOpenMM_1_1NonbondedForce_1aabeb540e82431acab693da4d1d5b98c7" kindref="member">setPMEParameters()</ref>, or the standard values calculated based on the Ewald error tolerance. See the manual for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> for which to get the parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>the separation parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">nx</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grid points along the X axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ny</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grid points along the Y axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">nz</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grid points along the Z axis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="318" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a558f7ba562c91c668d1213dd1127068d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::addParticle</definition>
        <argsstring>(double charge, double sigma, double epsilon)</argsstring>
        <name>addParticle</name>
        <param>
          <type>double</type>
          <declname>charge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add the nonbonded force parameters for a particle. This should be called once for each particle in the <ref refid="classOpenMM_1_1System" kindref="compound">System</ref>. When it is called for the i&apos;th time, it specifies the parameters for the i&apos;th particle. For calculating the Lennard-Jones interaction between two particles, the arithmetic mean of the sigmas and the geometric mean of the epsilons for the two interacting particles is used (the Lorentz-Berthelot combining rule).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>charge</parametername>
</parameternamelist>
<parameterdescription>
<para>the charge of the particle, measured in units of the proton charge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the particle that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="331" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a764e6003e73474c53c7ff46956fd849d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::getParticleParameters</definition>
        <argsstring>(int index, double &amp;charge, double &amp;sigma, double &amp;epsilon) const</argsstring>
        <name>getParticleParameters</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>charge</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the nonbonded force parameters for a particle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the particle for which to get parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">charge</parametername>
</parameternamelist>
<parameterdescription>
<para>the charge of the particle, measured in units of the proton charge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="340" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1aa869f87271dc10de006fb91918599d4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setParticleParameters</definition>
        <argsstring>(int index, double charge, double sigma, double epsilon)</argsstring>
        <name>setParticleParameters</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>charge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the nonbonded force parameters for a particle. When calculating the Lennard-Jones interaction between two particles, it uses the arithmetic mean of the sigmas and the geometric mean of the epsilons for the two interacting particles (the Lorentz-Berthelot combining rule).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the particle for which to set parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charge</parametername>
</parameternamelist>
<parameterdescription>
<para>the charge of the particle, measured in units of the proton charge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="351" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a6f5420eaabde9eedb67fa05877b064f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::addException</definition>
        <argsstring>(int particle1, int particle2, double chargeProd, double sigma, double epsilon, bool replace=false)</argsstring>
        <name>addException</name>
        <param>
          <type>int</type>
          <declname>particle1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>particle2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>chargeProd</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>replace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an interaction to the list of exceptions that should be calculated differently from other interactions. If chargeProd and epsilon are both equal to 0, this will cause the interaction to be completely omitted from force and energy calculations.</para>
<para>In many cases, you can use <ref refid="classOpenMM_1_1NonbondedForce_1ad134560198e7d2150b6937e70652ea99" kindref="member">createExceptionsFromBonds()</ref> rather than adding each exception explicitly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particle1</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the first particle involved in the interaction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particle2</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the second particle involved in the interaction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chargeProd</parametername>
</parameternamelist>
<parameterdescription>
<para>the scaled product of the atomic charges (i.e. the strength of the Coulomb interaction), measured in units of the proton charge squared </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replace</parametername>
</parameternamelist>
<parameterdescription>
<para>determines the behavior if there is already an exception for the same two particles. If true, the existing one is replaced. If false, an exception is thrown. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the exception that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="368" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a476e0b60970710e42e0b8da3c966653e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::getExceptionParameters</definition>
        <argsstring>(int index, int &amp;particle1, int &amp;particle2, double &amp;chargeProd, double &amp;sigma, double &amp;epsilon) const</argsstring>
        <name>getExceptionParameters</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>particle1</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>particle2</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>chargeProd</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the force field parameters for an interaction that should be calculated differently from others.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the interaction for which to get parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">particle1</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the first particle involved in the interaction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">particle2</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the second particle involved in the interaction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">chargeProd</parametername>
</parameternamelist>
<parameterdescription>
<para>the scaled product of the atomic charges (i.e. the strength of the Coulomb interaction), measured in units of the proton charge squared </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="379" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a783159a8d50fb57e7db306b18c78b929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setExceptionParameters</definition>
        <argsstring>(int index, int particle1, int particle2, double chargeProd, double sigma, double epsilon)</argsstring>
        <name>setExceptionParameters</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>particle1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>particle2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>chargeProd</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the force field parameters for an interaction that should be calculated differently from others. If chargeProd and epsilon are both equal to 0, this will cause the interaction to be completely omitted from force and energy calculations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the interaction for which to get parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particle1</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the first particle involved in the interaction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particle2</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the second particle involved in the interaction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chargeProd</parametername>
</parameternamelist>
<parameterdescription>
<para>the scaled product of the atomic charges (i.e. the strength of the Coulomb interaction), measured in units of the proton charge squared </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="392" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1ad134560198e7d2150b6937e70652ea99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::createExceptionsFromBonds</definition>
        <argsstring>(const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;bonds, double coulomb14Scale, double lj14Scale)</argsstring>
        <name>createExceptionsFromBonds</name>
        <param>
          <type>const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;</type>
          <declname>bonds</declname>
        </param>
        <param>
          <type>double</type>
          <declname>coulomb14Scale</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lj14Scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Identify exceptions based on the molecular topology. Particles which are separated by one or two bonds are set to not interact at all, while pairs of particles separated by three bonds (known as &quot;1-4 interactions&quot;) have their Coulomb and Lennard-Jones interactions reduced by a fixed factor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bonds</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of bonds based on which to construct exceptions. Each element specifies the indices of two particles that are bonded to each other. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coulomb14Scale</parametername>
</parameternamelist>
<parameterdescription>
<para>pairs of particles separated by three bonds will have the strength of their Coulomb interaction multiplied by this factor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lj14Scale</parametername>
</parameternamelist>
<parameterdescription>
<para>pairs of particles separated by three bonds will have the strength of their Lennard-Jones interaction multiplied by this factor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="405" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a309ebd13734f9f59205740d473af31b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::addGlobalParameter</definition>
        <argsstring>(const std::string &amp;name, double defaultValue)</argsstring>
        <name>addGlobalParameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new global parameter that parameter offsets may depend on. The default value provided to this method is the initial value of the parameter in newly created Contexts. You can change the value at any time by calling setParameter() on the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value of the parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the parameter that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="415" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1aa8137d0504889d326d0ba92e2d67a312" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; OpenMM::NonbondedForce::getGlobalParameterName</definition>
        <argsstring>(int index) const</argsstring>
        <name>getGlobalParameterName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to get the name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the parameter name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="422" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a6d27e0d14e3ed8bc290471c385f87486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setGlobalParameterName</definition>
        <argsstring>(int index, const std::string &amp;name)</argsstring>
        <name>setGlobalParameterName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the name of a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to set the name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="429" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a74119dee672309eb8f2c08727b4245e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double OpenMM::NonbondedForce::getGlobalParameterDefaultValue</definition>
        <argsstring>(int index) const</argsstring>
        <name>getGlobalParameterDefaultValue</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the default value of a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to get the default value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the parameter default value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="436" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a248db8ffaaf9279570ceeeb54a2e881f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setGlobalParameterDefaultValue</definition>
        <argsstring>(int index, double defaultValue)</argsstring>
        <name>setGlobalParameterDefaultValue</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the default value of a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the parameter for which to set the default value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value of the parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="443" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1ac3f072150a9a2a851065b585dc509009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::addParticleParameterOffset</definition>
        <argsstring>(const std::string &amp;parameter, int particleIndex, double chargeScale, double sigmaScale, double epsilonScale)</argsstring>
        <name>addParticleParameterOffset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>particleIndex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>chargeScale</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigmaScale</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilonScale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an offset to the per-particle parameters of a particular particle, based on a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the global parameter. It must have already been added with <ref refid="classOpenMM_1_1NonbondedForce_1a309ebd13734f9f59205740d473af31b5" kindref="member">addGlobalParameter()</ref>. Its value can be modified at any time by calling <ref refid="classOpenMM_1_1Context_1a368b7f53ee35bb151ee686441b7900af" kindref="member">Context::setParameter()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particleIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the particle whose parameters are affected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chargeScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the particle&apos;s charge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigmaScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the particle&apos;s sigma </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilonScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the particle&apos;s epsilon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the offset that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="455" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a862800468b9e66d53d5aeecb86dc07b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::getParticleParameterOffset</definition>
        <argsstring>(int index, std::string &amp;parameter, int &amp;particleIndex, double &amp;chargeScale, double &amp;sigmaScale, double &amp;epsilonScale) const</argsstring>
        <name>getParticleParameterOffset</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>particleIndex</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>chargeScale</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>sigmaScale</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>epsilonScale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the offset added to the per-particle parameters of a particular particle, based on a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the offset to query, as returned by <ref refid="classOpenMM_1_1NonbondedForce_1ac3f072150a9a2a851065b585dc509009" kindref="member">addParticleParameterOffset()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the global parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particleIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the particle whose parameters are affected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chargeScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the particle&apos;s charge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigmaScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the particle&apos;s sigma </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilonScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the particle&apos;s epsilon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="466" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1ae1cc3c355341f4bb778691345974fd55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setParticleParameterOffset</definition>
        <argsstring>(int index, const std::string &amp;parameter, int particleIndex, double chargeScale, double sigmaScale, double epsilonScale)</argsstring>
        <name>setParticleParameterOffset</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>particleIndex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>chargeScale</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigmaScale</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilonScale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the offset added to the per-particle parameters of a particular particle, based on a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the offset to modify, as returned by <ref refid="classOpenMM_1_1NonbondedForce_1ac3f072150a9a2a851065b585dc509009" kindref="member">addParticleParameterOffset()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the global parameter. It must have already been added with <ref refid="classOpenMM_1_1NonbondedForce_1a309ebd13734f9f59205740d473af31b5" kindref="member">addGlobalParameter()</ref>. Its value can be modified at any time by calling <ref refid="classOpenMM_1_1Context_1a368b7f53ee35bb151ee686441b7900af" kindref="member">Context::setParameter()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particleIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the particle whose parameters are affected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chargeScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the particle&apos;s charge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigmaScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the particle&apos;s sigma </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilonScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the particle&apos;s epsilon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="478" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1ab651a021a78b810e86f5824780e79792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::addExceptionParameterOffset</definition>
        <argsstring>(const std::string &amp;parameter, int exceptionIndex, double chargeProdScale, double sigmaScale, double epsilonScale)</argsstring>
        <name>addExceptionParameterOffset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>exceptionIndex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>chargeProdScale</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigmaScale</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilonScale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an offset to the parameters of a particular exception, based on a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the global parameter. It must have already been added with <ref refid="classOpenMM_1_1NonbondedForce_1a309ebd13734f9f59205740d473af31b5" kindref="member">addGlobalParameter()</ref>. Its value can be modified at any time by calling <ref refid="classOpenMM_1_1Context_1a368b7f53ee35bb151ee686441b7900af" kindref="member">Context::setParameter()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exceptionIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the exception whose parameters are affected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chargeProdScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the exception&apos;s charge product </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigmaScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the exception&apos;s sigma </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilonScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the exception&apos;s epsilon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the offset that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="490" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1aa1337012546415c563632f61b75127aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::getExceptionParameterOffset</definition>
        <argsstring>(int index, std::string &amp;parameter, int &amp;exceptionIndex, double &amp;chargeProdScale, double &amp;sigmaScale, double &amp;epsilonScale) const</argsstring>
        <name>getExceptionParameterOffset</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>exceptionIndex</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>chargeProdScale</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>sigmaScale</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>epsilonScale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the offset added to the parameters of a particular exception, based on a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the offset to query, as returned by <ref refid="classOpenMM_1_1NonbondedForce_1ab651a021a78b810e86f5824780e79792" kindref="member">addExceptionParameterOffset()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the global parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exceptionIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the exception whose parameters are affected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chargeProdScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the exception&apos;s charge product </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigmaScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the exception&apos;s sigma </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilonScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the exception&apos;s epsilon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="501" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a18864cbd2745a3e0ea6f58d8c3f07fb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setExceptionParameterOffset</definition>
        <argsstring>(int index, const std::string &amp;parameter, int exceptionIndex, double chargeProdScale, double sigmaScale, double epsilonScale)</argsstring>
        <name>setExceptionParameterOffset</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>exceptionIndex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>chargeProdScale</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigmaScale</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilonScale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the offset added to the parameters of a particular exception, based on a global parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the offset to modify, as returned by <ref refid="classOpenMM_1_1NonbondedForce_1ab651a021a78b810e86f5824780e79792" kindref="member">addExceptionParameterOffset()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the global parameter. It must have already been added with <ref refid="classOpenMM_1_1NonbondedForce_1a309ebd13734f9f59205740d473af31b5" kindref="member">addGlobalParameter()</ref>. Its value can be modified at any time by calling <ref refid="classOpenMM_1_1Context_1a368b7f53ee35bb151ee686441b7900af" kindref="member">Context::setParameter()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exceptionIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the exception whose parameters are affected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chargeProdScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the exception&apos;s charge product </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigmaScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the exception&apos;s sigma </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilonScale</parametername>
</parameternamelist>
<parameterdescription>
<para>this value multiplied by the parameter value is added to the exception&apos;s epsilon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="513" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1af55de6e3047ed13833e87e66d95e25f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool OpenMM::NonbondedForce::getUseDispersionCorrection</definition>
        <argsstring>() const</argsstring>
        <name>getUseDispersionCorrection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get whether to add a contribution to the energy that approximately represents the effect of Lennard-Jones interactions beyond the cutoff distance. The energy depends on the volume of the periodic box, and is only applicable when periodic boundary conditions are used. When running simulations at constant pressure, adding this contribution can improve the quality of results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="520" column="10" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="520" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1ac71edb8b933b2ca452075c321caefa15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setUseDispersionCorrection</definition>
        <argsstring>(bool useCorrection)</argsstring>
        <name>setUseDispersionCorrection</name>
        <param>
          <type>bool</type>
          <declname>useCorrection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set whether to add a contribution to the energy that approximately represents the effect of Lennard-Jones interactions beyond the cutoff distance. The energy depends on the volume of the periodic box, and is only applicable when periodic boundary conditions are used. When running simulations at constant pressure, adding this contribution can improve the quality of results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="529" column="10" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="529" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a90153e6b1fea1b967fca5808fd90908f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::getReciprocalSpaceForceGroup</definition>
        <argsstring>() const</argsstring>
        <name>getReciprocalSpaceForceGroup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the force group that reciprocal space interactions for Ewald or PME are included in. This allows multiple time step integrators to evaluate direct and reciprocal space interactions at different intervals: <ref refid="classOpenMM_1_1Force_1ab9428f8447cba02d548963242dd674ff" kindref="member">getForceGroup()</ref> specifies the group for direct space, and <ref refid="classOpenMM_1_1NonbondedForce_1a90153e6b1fea1b967fca5808fd90908f" kindref="member">getReciprocalSpaceForceGroup()</ref> specifies the group for reciprocal space. If this is -1 (the default value), the same force group is used for reciprocal space as for direct space. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="538" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1af35a2f01bff0a3ee810f038df4538185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setReciprocalSpaceForceGroup</definition>
        <argsstring>(int group)</argsstring>
        <name>setReciprocalSpaceForceGroup</name>
        <param>
          <type>int</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the force group that reciprocal space interactions for Ewald or PME are included in. This allows multiple time step integrators to evaluate direct and reciprocal space interactions at different intervals: <ref refid="classOpenMM_1_1Force_1a53e3829a91825a9f6aa17e5ade713f84" kindref="member">setForceGroup()</ref> specifies the group for direct space, and <ref refid="classOpenMM_1_1NonbondedForce_1af35a2f01bff0a3ee810f038df4538185" kindref="member">setReciprocalSpaceForceGroup()</ref> specifies the group for reciprocal space. If this is -1 (the default value), the same force group is used for reciprocal space as for direct space.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>the group index. Legal values are between 0 and 31 (inclusive), or -1 to use the same force group that is specified for direct space. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="548" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1ab4e1122550cbeeec3f57425b10d71547" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OpenMM::NonbondedForce::getIncludeDirectSpace</definition>
        <argsstring>() const</argsstring>
        <name>getIncludeDirectSpace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get whether to include direct space interactions when calculating forces and energies. This is useful if you want to completely replace the direct space calculation, typically with a <ref refid="classOpenMM_1_1CustomNonbondedForce" kindref="compound">CustomNonbondedForce</ref> that computes it in a nonstandard way, while still using this object for the reciprocal space calculation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="554" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a7112ecce9d268f06265745b2f7a19fb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setIncludeDirectSpace</definition>
        <argsstring>(bool include)</argsstring>
        <name>setIncludeDirectSpace</name>
        <param>
          <type>bool</type>
          <declname>include</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set whether to include direct space interactions when calculating forces and energies. This is useful if you want to completely replace the direct space calculation, typically with a <ref refid="classOpenMM_1_1CustomNonbondedForce" kindref="compound">CustomNonbondedForce</ref> that computes it in a nonstandard way, while still using this object for the reciprocal space calculation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="560" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1abc68b57ace47dafd3bf2e601b3cfa6eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::updateParametersInContext</definition>
        <argsstring>(Context &amp;context)</argsstring>
        <name>updateParametersInContext</name>
        <param>
          <type><ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the particle and exception parameters in a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> to match those stored in this <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> object. This method provides an efficient method to update certain parameters in an existing <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> without needing to reinitialize it. Simply call <ref refid="classOpenMM_1_1NonbondedForce_1aa869f87271dc10de006fb91918599d4e" kindref="member">setParticleParameters()</ref> and <ref refid="classOpenMM_1_1NonbondedForce_1a783159a8d50fb57e7db306b18c78b929" kindref="member">setExceptionParameters()</ref> to modify this object&apos;s parameters, then call <ref refid="classOpenMM_1_1NonbondedForce_1abc68b57ace47dafd3bf2e601b3cfa6eb" kindref="member">updateParametersInContext()</ref> to copy them over to the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>.</para>
<para>This method has several limitations. The only information it updates is the parameters of particles and exceptions. All other aspects of the <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> (the nonbonded method, the cutoff distance, etc.) are unaffected and can only be changed by reinitializing the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>. Furthermore, only the chargeProd, sigma, and epsilon values of an exception can be changed; the pair of particles involved in the exception cannot change. Finally, this method cannot be used to add new particles or exceptions, only to change the parameters of existing ones. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="573" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a659f3db7a1aa6971fd8bd656557c6ddb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool OpenMM::NonbondedForce::usesPeriodicBoundaryConditions</definition>
        <argsstring>() const</argsstring>
        <name>usesPeriodicBoundaryConditions</name>
        <reimplements refid="classOpenMM_1_1Force_1a955afab55a1cd8b24cdf91258477237f">usesPeriodicBoundaryConditions</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether or not this force makes use of periodic boundary conditions.</para>
<para><simplesect kind="return"><para>true if force uses PBC and false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="580" column="10" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="580" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a4c118f62e8c4b5c7f38f4c3dc64b52ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OpenMM::NonbondedForce::getExceptionsUsePeriodicBoundaryConditions</definition>
        <argsstring>() const</argsstring>
        <name>getExceptionsUsePeriodicBoundaryConditions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get whether periodic boundary conditions should be applied to exceptions. Usually this is not appropriate, because exceptions are normally used to represent bonded interactions (1-2, 1-3, and 1-4 pairs), but there are situations when it does make sense. For example, you may want to simulate an infinite chain where one end of a molecule is bonded to the opposite end of the next periodic copy.</para>
<para>Regardless of this value, periodic boundary conditions are only applied to exceptions if they also are applied to other interactions. If the nonbonded method is NoCutoff or CutoffNonPeriodic, this value is ignored. Also note that cutoffs are never applied to exceptions, again because they are normally used to represent bonded interactions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="598" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1ad7d9c8deb75daa2055a848aa822967dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::setExceptionsUsePeriodicBoundaryConditions</definition>
        <argsstring>(bool periodic)</argsstring>
        <name>setExceptionsUsePeriodicBoundaryConditions</name>
        <param>
          <type>bool</type>
          <declname>periodic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set whether periodic boundary conditions should be applied to exceptions. Usually this is not appropriate, because exceptions are normally used to represent bonded interactions (1-2, 1-3, and 1-4 pairs), but there are situations when it does make sense. For example, you may want to simulate an infinite chain where one end of a molecule is bonded to the opposite end of the next periodic copy.</para>
<para>Regardless of this value, periodic boundary conditions are only applied to exceptions if they also get applied to other interactions. If the nonbonded method is NoCutoff or CutoffNonPeriodic, this value is ignored. Also note that cutoffs are never applied to exceptions, again because they are normally used to represent bonded interactions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="611" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a368a4e8f7e6cdaa1c870ae7d2c8d142f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ForceImpl *</type>
        <definition>ForceImpl * OpenMM::NonbondedForce::createImpl</definition>
        <argsstring>() const</argsstring>
        <name>createImpl</name>
        <reimplements refid="classOpenMM_1_1Force_1a12dc4c2566ab670d47ef05bda169fa05">createImpl</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> is created, it invokes this method on each <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> in the <ref refid="classOpenMM_1_1System" kindref="compound">System</ref>. It should create a new ForceImpl object which can be used by the context for calculating forces. The ForceImpl will be deleted automatically when the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> is deleted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="613" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1a92f17f13ba8f3c8fb3a31215763a7b9d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::NonbondedForce::addExclusionsToSet</definition>
        <argsstring>(const std::vector&lt; std::set&lt; int &gt; &gt; &amp;bonded12, std::set&lt; int &gt; &amp;exclusions, int baseParticle, int fromParticle, int currentLevel) const</argsstring>
        <name>addExclusionsToSet</name>
        <param>
          <type>const std::vector&lt; std::set&lt; int &gt; &gt; &amp;</type>
          <declname>bonded12</declname>
        </param>
        <param>
          <type>std::set&lt; int &gt; &amp;</type>
          <declname>exclusions</declname>
        </param>
        <param>
          <type>int</type>
          <declname>baseParticle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fromParticle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>currentLevel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="624" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1NonbondedForce_1ac9e5779d81874230a28d8a7263862c5f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::NonbondedForce::getGlobalParameterIndex</definition>
        <argsstring>(const std::string &amp;parameter) const</argsstring>
        <name>getGlobalParameterIndex</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="625" column="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class implements nonbonded interactions between particles, including a Coulomb force to represent electrostatics and a Lennard-Jones force to represent van der Waals interactions. It optionally supports periodic boundary conditions and cutoffs for long range interactions. Lennard-Jones interactions are calculated with the Lorentz-Berthelot combining rule: it uses the arithmetic mean of the sigmas and the geometric mean of the epsilons for the two interacting particles.</para>
<para>To use this class, create a <ref refid="classOpenMM_1_1NonbondedForce" kindref="compound">NonbondedForce</ref> object, then call <ref refid="classOpenMM_1_1NonbondedForce_1a558f7ba562c91c668d1213dd1127068d" kindref="member">addParticle()</ref> once for each particle in the <ref refid="classOpenMM_1_1System" kindref="compound">System</ref> to define its parameters. The number of particles for which you define nonbonded parameters must be exactly equal to the number of particles in the <ref refid="classOpenMM_1_1System" kindref="compound">System</ref>, or else an exception will be thrown when you try to create a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>. After a particle has been added, you can modify its force field parameters by calling <ref refid="classOpenMM_1_1NonbondedForce_1aa869f87271dc10de006fb91918599d4e" kindref="member">setParticleParameters()</ref>. This will have no effect on Contexts that already exist unless you call <ref refid="classOpenMM_1_1NonbondedForce_1abc68b57ace47dafd3bf2e601b3cfa6eb" kindref="member">updateParametersInContext()</ref>.</para>
<para><ref refid="classOpenMM_1_1NonbondedForce" kindref="compound">NonbondedForce</ref> also lets you specify &quot;exceptions&quot;, particular pairs of particles whose interactions should be computed based on different parameters than those defined for the individual particles. This can be used to completely exclude certain interactions from the force calculation, or to alter how they interact with each other.</para>
<para>Many molecular force fields omit Coulomb and Lennard-Jones interactions between particles separated by one or two bonds, while using modified parameters for those separated by three bonds (known as &quot;1-4 interactions&quot;). This class provides a convenience method for this case called <ref refid="classOpenMM_1_1NonbondedForce_1ad134560198e7d2150b6937e70652ea99" kindref="member">createExceptionsFromBonds()</ref>. You pass to it a list of bonds and the scale factors to use for 1-4 interactions. It identifies all pairs of particles which are separated by 1, 2, or 3 bonds, then automatically creates exceptions for them.</para>
<para>When using a cutoff, by default Lennard-Jones interactions are sharply truncated at the cutoff distance. Optionally you can instead use a switching function to make the interaction smoothly go to zero over a finite distance range. To enable this, call <ref refid="classOpenMM_1_1NonbondedForce_1a7853d829222ad74226b03cfd70ab126b" kindref="member">setUseSwitchingFunction()</ref>. You must also call <ref refid="classOpenMM_1_1NonbondedForce_1a613f3d52e7cc6378964081b3a4bb440a" kindref="member">setSwitchingDistance()</ref> to specify the distance at which the interaction should begin to decrease. The switching distance must be less than the cutoff distance.</para>
<para>Another optional feature of this class (enabled by default) is to add a contribution to the energy which approximates the effect of all Lennard-Jones interactions beyond the cutoff in a periodic system. When running a simulation at constant pressure, this can improve the quality of the result. Call <ref refid="classOpenMM_1_1NonbondedForce_1ac71edb8b933b2ca452075c321caefa15" kindref="member">setUseDispersionCorrection()</ref> to set whether this should be used.</para>
<para>In some applications, it is useful to be able to inexpensively change the parameters of small groups of particles. Usually this is done to interpolate between two sets of parameters. For example, a titratable group might have two states it can exist in, each described by a different set of parameters for the atoms that make up the group. You might then want to smoothly interpolate between the two states. This is done by first calling <ref refid="classOpenMM_1_1NonbondedForce_1a309ebd13734f9f59205740d473af31b5" kindref="member">addGlobalParameter()</ref> to define a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> parameter, then <ref refid="classOpenMM_1_1NonbondedForce_1ac3f072150a9a2a851065b585dc509009" kindref="member">addParticleParameterOffset()</ref> to create a &quot;parameter offset&quot; that depends on the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> parameter. Each offset defines the following:</para>
<para><itemizedlist>
<listitem>
<para>A <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> parameter used to interpolate between the states. </para>
</listitem>
<listitem>
<para>A single particle whose parameters are influenced by the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> parameter. </para>
</listitem>
<listitem>
<para>Three scale factors (chargeScale, sigmaScale, and epsilonScale) that specify how the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> parameter affects the particle. </para>
</listitem>
</itemizedlist>
</para>
<para>The &quot;effective&quot; parameters for a particle (those used to compute forces) are given by</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    charge = baseCharge + param*chargeScale
*    sigma = baseSigma + param*sigmaScale
*    epsilon = baseEpsilon + param*epsilonScale
*
* </verbatim></para>
<para>where the &quot;base&quot; values are the ones specified by <ref refid="classOpenMM_1_1NonbondedForce_1a558f7ba562c91c668d1213dd1127068d" kindref="member">addParticle()</ref> and &quot;oaram&quot; is the current value of the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> parameter. A single <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> parameter can apply offsets to multiple particles, and multiple parameters can be used to apply offsets to the same particle. Parameters can also be used to modify exceptions in exactly the same way by calling <ref refid="classOpenMM_1_1NonbondedForce_1ab651a021a78b810e86f5824780e79792" kindref="member">addExceptionParameterOffset()</ref>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>OpenMM::Force</label>
        <link refid="classOpenMM_1_1Force"/>
      </node>
      <node id="1">
        <label>OpenMM::NonbondedForce</label>
        <link refid="classOpenMM_1_1NonbondedForce"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>OpenMM::Force</label>
        <link refid="classOpenMM_1_1Force"/>
      </node>
      <node id="1">
        <label>OpenMM::NonbondedForce</label>
        <link refid="classOpenMM_1_1NonbondedForce"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" line="111" column="1" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/NonbondedForce.h" bodystart="111" bodyend="632"/>
    <listofallmembers>
      <member refid="classOpenMM_1_1NonbondedForce_1a6f5420eaabde9eedb67fa05877b064f3" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>addException</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1ab651a021a78b810e86f5824780e79792" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>addExceptionParameterOffset</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a92f17f13ba8f3c8fb3a31215763a7b9d" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>addExclusionsToSet</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a309ebd13734f9f59205740d473af31b5" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>addGlobalParameter</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a558f7ba562c91c668d1213dd1127068d" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>addParticle</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1ac3f072150a9a2a851065b585dc509009" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>addParticleParameterOffset</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a5451ec919cff5efea3d02688290194d2" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>alpha</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1ad134560198e7d2150b6937e70652ea99" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>createExceptionsFromBonds</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a368a4e8f7e6cdaa1c870ae7d2c8d142f" prot="protected" virt="virtual"><scope>OpenMM::NonbondedForce</scope><name>createImpl</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a85b54690c6c0e8e9d0636e7b590edae1" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>cutoffDistance</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cfa8e12125ec7af9da6713afc75cb656356" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>CutoffNonPeriodic</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cfa389cc9c1d32af482704d7256c9a1d033" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>CutoffPeriodic</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a9c801e16de3b25ee87288ccee6b9f346" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>dalpha</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a7bf0c33ab8bccac266cd8ccc48e31ee9" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>dnx</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a185e8a65fa1c3eef829f51963af63d25" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>dny</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1af85f3721a193e94d364fa93526838bbf" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>dnz</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cfaea30fd2b3e9e87cff3ff0a3cfaa4f07f" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>Ewald</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a51785250c8086c2d7c9d7a7f84ff747f" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>ewaldErrorTol</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a1c53886bad57c2ca0f36dd55350e6d51" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>exceptionMap</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a55ba20e377c1bd6baf2820c274dfc7f2" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>exceptionOffsets</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a967bc337b632cfb47617247f53bbf588" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>exceptions</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a69076eea17285cd3d0441dc3ecdf0029" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>exceptionsUsePeriodic</name></member>
      <member refid="classOpenMM_1_1Force_1a40e75e251ec93d3bc9fc87b96026fbc2" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>Force</name></member>
      <member refid="classOpenMM_1_1Force_1a152bbe8e42e036e697b587c0832e233b" prot="protected" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getContextImpl</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a083f2ffa8d39bc871e209a305219004a" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getCutoffDistance</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a3589630c15b7d0f31a8d06253413c2a9" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getEwaldErrorTolerance</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1aa1337012546415c563632f61b75127aa" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getExceptionParameterOffset</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a476e0b60970710e42e0b8da3c966653e" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getExceptionParameters</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a4c118f62e8c4b5c7f38f4c3dc64b52ae" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getExceptionsUsePeriodicBoundaryConditions</name></member>
      <member refid="classOpenMM_1_1Force_1ab9428f8447cba02d548963242dd674ff" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getForceGroup</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a74119dee672309eb8f2c08727b4245e5" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getGlobalParameterDefaultValue</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1ac9e5779d81874230a28d8a7263862c5f" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getGlobalParameterIndex</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1aa8137d0504889d326d0ba92e2d67a312" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getGlobalParameterName</name></member>
      <member refid="classOpenMM_1_1Force_1aef442934a17134fe13f5dcc40ada7b11" prot="protected" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getImplInContext</name></member>
      <member refid="classOpenMM_1_1Force_1a1af3134b705088bd8ed5b6e7521db43d" prot="protected" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getImplInContext</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1ab4e1122550cbeeec3f57425b10d71547" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getIncludeDirectSpace</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1ab32d08590357b83bf447ffc9814742dc" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getLJPMEParameters</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1adf64ffba9efe4512233283b90563a5b8" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getLJPMEParametersInContext</name></member>
      <member refid="classOpenMM_1_1Force_1a479fe60e5fe8e344109f794ecd7b7bab" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getName</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a66a51e5804f0117cba1c7d904384c319" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getNonbondedMethod</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a3d3cb0abab0a37abff692c6c692280c9" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getNumExceptionParameterOffsets</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a2c5a2ad8054163dbaf54e042a8090f59" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getNumExceptions</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a48d08f458f4062eec514ec6b3adc107a" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getNumGlobalParameters</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a5bfc5bc00db21e296d8f61a395b7a227" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getNumParticleParameterOffsets</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a9f02c65d61e3a9f4248eaef3a96a708a" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getNumParticles</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a862800468b9e66d53d5aeecb86dc07b9" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getParticleParameterOffset</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a764e6003e73474c53c7ff46956fd849d" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getParticleParameters</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a1c14d3e3fd6df7e15930d1c34270a222" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getPMEParameters</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a33982b0b3390da1ee2f2087c4d2c0ccd" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getPMEParametersInContext</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a958d15eb53b2bb274e28b3fb7528b4ce" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getReactionFieldDielectric</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a90153e6b1fea1b967fca5808fd90908f" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getReciprocalSpaceForceGroup</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a547c37d1ca91d369b0d10894dd481130" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getSwitchingDistance</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1af55de6e3047ed13833e87e66d95e25f6" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getUseDispersionCorrection</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a3e2e6cf8904b0be32d262081c87815f8" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>getUseSwitchingFunction</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1adba95a25b71df286aa18d293f1fc8ece" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>globalParameters</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a9f08d6f95d3ec8149109bc9a611080a7" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>includeDirectSpace</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cfa7281e0712cf4d8ad1226be1c2c3b042b" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>LJPME</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cfad13dd4bb7d9867b3c187d076c88f8bb4" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>NoCutoff</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a6f390de4b2cde360e67f077aa5cf6ba9" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>NonbondedForce</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a2e57d9abdb595003e1457f45b93f3cb7" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>nonbondedMethod</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cf" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>NonbondedMethod</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a3cc0a6003afe8422bcbdba89057f2e14" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>nx</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a460647d77d90c705741858deda1390c5" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>ny</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1adc2f6d6adfcd6fec50eb6d1fb315713a" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>nz</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a9baf7fb170eff3a02951aa9a00203733" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>particleOffsets</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a75ba047ccfc961127ba91acdbc90b132" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>particles</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a17664b9985e30c77c7778110b5f9a0cfa2280137f402d5f75307e2774793e7483" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>PME</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a551a1e6e578c73ea43059cde712d005f" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>recipForceGroup</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a5dce92c7ba2aa8036eab320dd011fd69" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>rfDielectric</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a053d15e3e3e9157a54eadbb84df746e1" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setCutoffDistance</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1ab96787c5558d1a6df37888bbd2aa7258" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setEwaldErrorTolerance</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a18864cbd2745a3e0ea6f58d8c3f07fb5" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setExceptionParameterOffset</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a783159a8d50fb57e7db306b18c78b929" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setExceptionParameters</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1ad7d9c8deb75daa2055a848aa822967dc" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setExceptionsUsePeriodicBoundaryConditions</name></member>
      <member refid="classOpenMM_1_1Force_1a53e3829a91825a9f6aa17e5ade713f84" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setForceGroup</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a248db8ffaaf9279570ceeeb54a2e881f" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setGlobalParameterDefaultValue</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a6d27e0d14e3ed8bc290471c385f87486" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setGlobalParameterName</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a7112ecce9d268f06265745b2f7a19fb4" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setIncludeDirectSpace</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a3946ce0b153cb08fe756ed19ee83e8ea" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setLJPMEParameters</name></member>
      <member refid="classOpenMM_1_1Force_1ac0a383a4d4203427652f1ad5b2528215" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setName</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a0960e96d830494ccb308e30269f9a380" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setNonbondedMethod</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1ae1cc3c355341f4bb778691345974fd55" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setParticleParameterOffset</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1aa869f87271dc10de006fb91918599d4e" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setParticleParameters</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1aabeb540e82431acab693da4d1d5b98c7" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setPMEParameters</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a085d74a071bc3a25124da475a87b0a42" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setReactionFieldDielectric</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1af35a2f01bff0a3ee810f038df4538185" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setReciprocalSpaceForceGroup</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a613f3d52e7cc6378964081b3a4bb440a" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setSwitchingDistance</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1ac71edb8b933b2ca452075c321caefa15" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setUseDispersionCorrection</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a7853d829222ad74226b03cfd70ab126b" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>setUseSwitchingFunction</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a2a4da8513ec3c1fdd5b0928d310a92dd" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>switchingDistance</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1abc68b57ace47dafd3bf2e601b3cfa6eb" prot="public" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>updateParametersInContext</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a4ef85ce25928e382ca5f6e92383dfecf" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>useDispersionCorrection</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a659f3db7a1aa6971fd8bd656557c6ddb" prot="public" virt="virtual"><scope>OpenMM::NonbondedForce</scope><name>usesPeriodicBoundaryConditions</name></member>
      <member refid="classOpenMM_1_1NonbondedForce_1a864995e07e9d3de591f8200f308419da" prot="private" virt="non-virtual"><scope>OpenMM::NonbondedForce</scope><name>useSwitchingFunction</name></member>
      <member refid="classOpenMM_1_1Force_1a6516b32ebeb95a694f56d93bdf81f4fb" prot="public" virt="virtual"><scope>OpenMM::NonbondedForce</scope><name>~Force</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
