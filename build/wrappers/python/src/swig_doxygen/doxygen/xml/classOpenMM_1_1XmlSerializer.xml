<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classOpenMM_1_1XmlSerializer" kind="class" language="C++" prot="public">
    <compoundname>OpenMM::XmlSerializer</compoundname>
    <includes refid="XmlSerializer_8h" local="no">XmlSerializer.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classOpenMM_1_1XmlSerializer_1ad451070a4e6aef0b642964f2a650ae3d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void OpenMM::XmlSerializer::serialize</definition>
        <argsstring>(const T *object, const std::string &amp;rootName, std::ostream &amp;stream)</argsstring>
        <name>serialize</name>
        <param>
          <type>const T *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rootName</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize an object as XML.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>the object to serialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rootName</parametername>
</parameternamelist>
<parameterdescription>
<para>the name to use for the root node of the XML document </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>an output stream to write the XML to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/serialization/include/openmm/serialization/XmlSerializer.h" line="57" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/serialization/include/openmm/serialization/XmlSerializer.h" bodystart="57" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1XmlSerializer_1ac805f79f60484bbaeae369a358de44c2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>static T * OpenMM::XmlSerializer::deserialize</definition>
        <argsstring>(std::istream &amp;stream)</argsstring>
        <name>deserialize</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reconstruct an object that has been serialized as XML.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>an input stream to read the XML from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the newly created object. The caller assumes ownership of the object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/serialization/include/openmm/serialization/XmlSerializer.h" line="74" column="14" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/serialization/include/openmm/serialization/XmlSerializer.h" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1XmlSerializer_1af05adef32cd7efca316f971caee85374" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>static T * OpenMM::XmlSerializer::clone</definition>
        <argsstring>(const T &amp;object)</argsstring>
        <name>clone</name>
        <param>
          <type>const T &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clone an object by first serializing it, then deserializing it again. This method constructs the new object directly from the SerializationNodes without first converting them to XML. This means it is faster and uses less memory than making separate calls to <ref refid="classOpenMM_1_1XmlSerializer_1ad451070a4e6aef0b642964f2a650ae3d" kindref="member">serialize()</ref> and <ref refid="classOpenMM_1_1XmlSerializer_1ac805f79f60484bbaeae369a358de44c2" kindref="member">deserialize()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/serialization/include/openmm/serialization/XmlSerializer.h" line="83" column="14" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/serialization/include/openmm/serialization/XmlSerializer.h" bodystart="83" bodyend="88"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classOpenMM_1_1XmlSerializer_1af8d16e9bef95a9b7a81c688f8d0e752e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void OpenMM::XmlSerializer::serialize</definition>
        <argsstring>(const SerializationNode &amp;node, std::ostream &amp;stream)</argsstring>
        <name>serialize</name>
        <param>
          <type>const <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/serialization/include/openmm/serialization/XmlSerializer.h" line="91" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1XmlSerializer_1a39eeccb0e9d58ca276522bdda481de0a" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void * OpenMM::XmlSerializer::deserializeStream</definition>
        <argsstring>(std::istream &amp;stream)</argsstring>
        <name>deserializeStream</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/serialization/include/openmm/serialization/XmlSerializer.h" line="92" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1XmlSerializer_1ad26f86a7e6fb6bd5a8a3491fd07a9044" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void OpenMM::XmlSerializer::encodeNode</definition>
        <argsstring>(const SerializationNode &amp;node, std::ostream &amp;stream, int depth)</argsstring>
        <name>encodeNode</name>
        <param>
          <type>const <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/serialization/include/openmm/serialization/XmlSerializer.h" line="93" column="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classOpenMM_1_1XmlSerializer" kindref="compound">XmlSerializer</ref> is used for serializing objects as XML, and for reconstructing them again. </para>
    </detaileddescription>
    <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/serialization/include/openmm/serialization/XmlSerializer.h" line="47" column="1" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/serialization/include/openmm/serialization/XmlSerializer.h" bodystart="47" bodyend="94"/>
    <listofallmembers>
      <member refid="classOpenMM_1_1XmlSerializer_1af05adef32cd7efca316f971caee85374" prot="public" virt="non-virtual"><scope>OpenMM::XmlSerializer</scope><name>clone</name></member>
      <member refid="classOpenMM_1_1XmlSerializer_1ac805f79f60484bbaeae369a358de44c2" prot="public" virt="non-virtual"><scope>OpenMM::XmlSerializer</scope><name>deserialize</name></member>
      <member refid="classOpenMM_1_1XmlSerializer_1a39eeccb0e9d58ca276522bdda481de0a" prot="private" virt="non-virtual"><scope>OpenMM::XmlSerializer</scope><name>deserializeStream</name></member>
      <member refid="classOpenMM_1_1XmlSerializer_1ad26f86a7e6fb6bd5a8a3491fd07a9044" prot="private" virt="non-virtual"><scope>OpenMM::XmlSerializer</scope><name>encodeNode</name></member>
      <member refid="classOpenMM_1_1XmlSerializer_1ad451070a4e6aef0b642964f2a650ae3d" prot="public" virt="non-virtual"><scope>OpenMM::XmlSerializer</scope><name>serialize</name></member>
      <member refid="classOpenMM_1_1XmlSerializer_1af8d16e9bef95a9b7a81c688f8d0e752e" prot="private" virt="non-virtual"><scope>OpenMM::XmlSerializer</scope><name>serialize</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
