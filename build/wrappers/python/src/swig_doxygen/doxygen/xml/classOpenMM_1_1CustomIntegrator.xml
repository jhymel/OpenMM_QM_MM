<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classOpenMM_1_1CustomIntegrator" kind="class" language="C++" prot="public">
    <compoundname>OpenMM::CustomIntegrator</compoundname>
    <basecompoundref refid="classOpenMM_1_1Integrator" prot="public" virt="non-virtual">OpenMM::Integrator</basecompoundref>
    <includes refid="CustomIntegrator_8h" local="no">CustomIntegrator.h</includes>
    <innerclass refid="classOpenMM_1_1CustomIntegrator_1_1ComputationInfo" prot="private">OpenMM::CustomIntegrator::ComputationInfo</innerclass>
    <innerclass refid="classOpenMM_1_1CustomIntegrator_1_1FunctionInfo" prot="private">OpenMM::CustomIntegrator::FunctionInfo</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94" prot="public" static="no" strong="no">
        <type></type>
        <name>ComputationType</name>
        <enumvalue id="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94aa40bc23c31491e49873971387c084fbc" prot="public">
          <name>ComputeGlobal</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compute an expression and store it in a global variable. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94af98c2d634cc8936bae2c352744247d2c" prot="public">
          <name>ComputePerDof</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compute an expression for every degree of freedom and store it in a per-DOF variable. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94a8ceb4bc519cb7d862ef03fd71f96412d" prot="public">
          <name>ComputeSum</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compute an expression for every degree of freedom, sum the values, and store the result in a global variable. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94a4e393da7491775e311c5f4b7de68597c" prot="public">
          <name>ConstrainPositions</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Update particle positions so all constraints are satisfied. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94aae0af132e8fe14e9a33e7f04b5c30a98" prot="public">
          <name>ConstrainVelocities</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Update particle velocities so the net velocity along all constraints is 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94aa1276890a76ddddd33dd49a70f4cd538" prot="public">
          <name>UpdateContextState</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Allow Forces to update the context state. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94a7f9fa6cb4b0e7e4b260f9f5fa54708d2" prot="public">
          <name>IfBlockStart</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Begin an &quot;if&quot; block. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94a8541378242db55f1dd401923e7f1d59c" prot="public">
          <name>WhileBlockStart</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Begin a while" block. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94a2b264f743b6d84d630419d306fb88dad" prot="public">
          <name>BlockEnd</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>End an &quot;if&quot; or &quot;while&quot; block. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an enumeration of the different types of computations that may appear in an integration algorithm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="344" column="5" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="344" bodyend="381"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classOpenMM_1_1CustomIntegrator_1a8fcddb77658859ba303526131f7f32d1" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; OpenMM::CustomIntegrator::globalNames</definition>
        <argsstring></argsstring>
        <name>globalNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="722" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="721" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomIntegrator_1a10cd491cf66e9cffe9b13915f4c1ad21" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; OpenMM::CustomIntegrator::perDofNames</definition>
        <argsstring></argsstring>
        <name>perDofNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="723" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="723" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomIntegrator_1ae1d4224e365373b92cb36649f3c5b600" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; OpenMM::CustomIntegrator::globalValues</definition>
        <argsstring></argsstring>
        <name>globalValues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="724" column="25" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="724" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomIntegrator_1a9732f1d67156c176671adfd9ee990341" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classOpenMM_1_1Vec3" kindref="compound">Vec3</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;Vec3&gt; &gt; OpenMM::CustomIntegrator::perDofValues</definition>
        <argsstring></argsstring>
        <name>perDofValues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="725" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomIntegrator_1a30dc9ef694a936f92fc4919bd8afc309" prot="private" static="no" mutable="no">
        <type>std::vector&lt; ComputationInfo &gt;</type>
        <definition>std::vector&lt;ComputationInfo&gt; OpenMM::CustomIntegrator::computations</definition>
        <argsstring></argsstring>
        <name>computations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="726" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="726" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomIntegrator_1aafd0296fa54d29ea49576a310cb29ecd" prot="private" static="no" mutable="no">
        <type>std::vector&lt; FunctionInfo &gt;</type>
        <definition>std::vector&lt;FunctionInfo&gt; OpenMM::CustomIntegrator::functions</definition>
        <argsstring></argsstring>
        <name>functions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="727" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="727" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomIntegrator_1aa70d7fc5de073d43aa84cdb306e39107" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string OpenMM::CustomIntegrator::kineticEnergy</definition>
        <argsstring></argsstring>
        <name>kineticEnergy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="728" column="17" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="728" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomIntegrator_1a21e8e99537801a9da64548e9ca49df9e" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool OpenMM::CustomIntegrator::globalsAreCurrent</definition>
        <argsstring></argsstring>
        <name>globalsAreCurrent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="729" column="18" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomIntegrator_1a2e9ee85231ae489b00cc0c4ebbedd3e3" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::randomNumberSeed</definition>
        <argsstring></argsstring>
        <name>randomNumberSeed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="730" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="730" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomIntegrator_1af258dc48bcaa86017396e054840da074" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool OpenMM::CustomIntegrator::forcesAreValid</definition>
        <argsstring></argsstring>
        <name>forcesAreValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="731" column="10" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomIntegrator_1af3b67fb22f1bf98fbba0722261b740de" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool OpenMM::CustomIntegrator::keNeedsForce</definition>
        <argsstring></argsstring>
        <name>keNeedsForce</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="731" column="25" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1CustomIntegrator_1acf5cbf5682744abce7c4747321455a42" prot="private" static="no" mutable="no">
        <type>Kernel</type>
        <definition>Kernel OpenMM::CustomIntegrator::kernel</definition>
        <argsstring></argsstring>
        <name>kernel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="732" column="12" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="732" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1ad8618f8cb7acb291d0332281d590c5df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>OpenMM::CustomIntegrator::CustomIntegrator</definition>
        <argsstring>(double stepSize)</argsstring>
        <name>CustomIntegrator</name>
        <param>
          <type>double</type>
          <declname>stepSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classOpenMM_1_1CustomIntegrator" kindref="compound">CustomIntegrator</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stepSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the step size with which to integrate the system (in picoseconds) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="387" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a9b78c860b1075c0086a4761ba2a79d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>OpenMM::CustomIntegrator::~CustomIntegrator</definition>
        <argsstring>()</argsstring>
        <name>~CustomIntegrator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="388" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1aee483aabbf2e5bc7c4691303793d4fa4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::getNumGlobalVariables</definition>
        <argsstring>() const</argsstring>
        <name>getNumGlobalVariables</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of global variables that have been defined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="392" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="392" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a3be849e19479c3c6c85cbe84abe8b28d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::getNumPerDofVariables</definition>
        <argsstring>() const</argsstring>
        <name>getNumPerDofVariables</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of per-DOF variables that have been defined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="398" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="398" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a24f7447f1776d1ba0cf026db26d30d00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::getNumComputations</definition>
        <argsstring>() const</argsstring>
        <name>getNumComputations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of computation steps that have been added. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="404" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="404" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1ab5107b0f20adc0b84a20bed33ec8ac32" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::getNumTabulatedFunctions</definition>
        <argsstring>() const</argsstring>
        <name>getNumTabulatedFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of tabulated functions that have been defined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="410" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="410" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1abeb095877e186fcc371dfd65c1cc162c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::addGlobalVariable</definition>
        <argsstring>(const std::string &amp;name, double initialValue)</argsstring>
        <name>addGlobalVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initialValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define a new global variable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the variable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the variable will initially be set to this value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the variable that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="420" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a77f35fa9cc35fdcb13fb136f6f246325" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; OpenMM::CustomIntegrator::getGlobalVariableName</definition>
        <argsstring>(int index) const</argsstring>
        <name>getGlobalVariableName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a global variable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the variable to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the name of the variable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="427" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a250dc9f94c2c9e7ec3c6f6f6b5ea3b92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::addPerDofVariable</definition>
        <argsstring>(const std::string &amp;name, double initialValue)</argsstring>
        <name>addPerDofVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initialValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define a new per-DOF variable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the variable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the variable will initially be set to this value for all degrees of freedom </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the variable that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="436" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a3af3eb9c385efdb3ee81b8b9bb35b625" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; OpenMM::CustomIntegrator::getPerDofVariableName</definition>
        <argsstring>(int index) const</argsstring>
        <name>getPerDofVariableName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a per-DOF variable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the variable to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the name of the variable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="443" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a08fbbd98541cadbe1431df1c36856d35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double OpenMM::CustomIntegrator::getGlobalVariable</definition>
        <argsstring>(int index) const</argsstring>
        <name>getGlobalVariable</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current value of a global variable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the variable to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the current value of the variable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="450" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1ad410984c1fa883c6c8c122b19fbc8a98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double OpenMM::CustomIntegrator::getGlobalVariableByName</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>getGlobalVariableByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current value of a global variable, specified by name.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the variable to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the current value of the parameter </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="457" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a81ccb39f44fcc518c604d98480c1760b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::setGlobalVariable</definition>
        <argsstring>(int index, double value)</argsstring>
        <name>setGlobalVariable</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the value of a global variable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the variable to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the new value of the variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="464" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a85e94b7451cef82cc49cfe3b5837aeef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::setGlobalVariableByName</definition>
        <argsstring>(const std::string &amp;name, double value)</argsstring>
        <name>setGlobalVariableByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the value of a global variable, specified by name.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the variable to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the new value of the variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="471" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1ad5eeda5f7b94d86f7f0c9adf62ee62b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::getPerDofVariable</definition>
        <argsstring>(int index, std::vector&lt; Vec3 &gt; &amp;values) const</argsstring>
        <name>getPerDofVariable</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classOpenMM_1_1Vec3" kindref="compound">Vec3</ref> &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value of a per-DOF variable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the variable to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>the values of the variable for all degrees of freedom are stored into this </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="479" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a042c3e391c9bb9db38e53900a927b2cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::getPerDofVariableByName</definition>
        <argsstring>(const std::string &amp;name, std::vector&lt; Vec3 &gt; &amp;values) const</argsstring>
        <name>getPerDofVariableByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classOpenMM_1_1Vec3" kindref="compound">Vec3</ref> &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value of a per-DOF variable, specified by name.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the variable to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">values</parametername>
</parameternamelist>
<parameterdescription>
<para>the values of the variable for all degrees of freedom are stored into this </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="487" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a2820061e2af5f40c0c03091557562595" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::setPerDofVariable</definition>
        <argsstring>(int index, const std::vector&lt; Vec3 &gt; &amp;values)</argsstring>
        <name>setPerDofVariable</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classOpenMM_1_1Vec3" kindref="compound">Vec3</ref> &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the value of a per-DOF variable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the variable to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>the new values of the variable for all degrees of freedom </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="494" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a70af73b410e7c6c30456e759051c941e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::setPerDofVariableByName</definition>
        <argsstring>(const std::string &amp;name, const std::vector&lt; Vec3 &gt; &amp;values)</argsstring>
        <name>setPerDofVariableByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classOpenMM_1_1Vec3" kindref="compound">Vec3</ref> &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the value of a per-DOF variable, specified by name.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the variable to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>the new values of the variable for all degrees of freedom </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="501" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1adedc9cd6343d2383f84162eff7f210cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::addComputeGlobal</definition>
        <argsstring>(const std::string &amp;variable, const std::string &amp;expression)</argsstring>
        <name>addComputeGlobal</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>variable</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>expression</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a step to the integration algorithm that computes a global value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variable</parametername>
</parameternamelist>
<parameterdescription>
<para>the global variable to store the computed value into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>a mathematical expression involving only global variables. In each integration step, its value is computed and stored into the specified variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the step that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="511" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a6934c0a85e70f7d9ae527d66893e76f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::addComputePerDof</definition>
        <argsstring>(const std::string &amp;variable, const std::string &amp;expression)</argsstring>
        <name>addComputePerDof</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>variable</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>expression</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a step to the integration algorithm that computes a per-DOF value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variable</parametername>
</parameternamelist>
<parameterdescription>
<para>the per-DOF variable to store the computed value into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>a mathematical expression involving both global and per-DOF variables. In each integration step, its value is computed for every degree of freedom and stored into the specified variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the step that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="522" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a1f01f987d11e6945753ff04985adc69f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::addComputeSum</definition>
        <argsstring>(const std::string &amp;variable, const std::string &amp;expression)</argsstring>
        <name>addComputeSum</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>variable</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>expression</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a step to the integration algorithm that computes a sum over degrees of freedom.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variable</parametername>
</parameternamelist>
<parameterdescription>
<para>the global variable to store the computed value into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>a mathematical expression involving both global and per-DOF variables. In each integration step, its value is computed for every degree of freedom. Those values are then added together, and the sum is stored in the specified variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the step that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="534" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a7de186fff300b99bec76eb02eb87365d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::addConstrainPositions</definition>
        <argsstring>()</argsstring>
        <name>addConstrainPositions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a step to the integration algorithm that updates particle positions so all constraints are satisfied.</para>
<para><simplesect kind="return"><para>the index of the step that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="541" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a147f50c1e80c9d89ee48787718aeae2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::addConstrainVelocities</definition>
        <argsstring>()</argsstring>
        <name>addConstrainVelocities</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a step to the integration algorithm that updates particle velocities so the net velocity along all constraints is 0.</para>
<para><simplesect kind="return"><para>the index of the step that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="548" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a25b0be3ed185e03a968b8dcd0fa77c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::addUpdateContextState</definition>
        <argsstring>()</argsstring>
        <name>addUpdateContextState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a step to the integration algorithm that allows Forces to update the context state.</para>
<para><simplesect kind="return"><para>the index of the step that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="555" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1aa77438c52f9652b8a3444ebb46dbd1db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::beginIfBlock</definition>
        <argsstring>(const std::string &amp;condition)</argsstring>
        <name>beginIfBlock</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>condition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a step which begins a new &quot;if&quot; block.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>a mathematical expression involving a comparison operator and global variables. All steps between this one and the end of the block are executed only if the condition is true.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the step that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="566" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1ab6ce81fa4f63bff07bec400e9a31f868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::beginWhileBlock</definition>
        <argsstring>(const std::string &amp;condition)</argsstring>
        <name>beginWhileBlock</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>condition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a step which begins a new &quot;while&quot; block.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>a mathematical expression involving a comparison operator and global variables. All steps between this one and the end of the block are executed repeatedly as long as the condition remains true.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the step that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="577" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a8516b990b15836fc9c17074c5b1b395e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::endBlock</definition>
        <argsstring>()</argsstring>
        <name>endBlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a step which marks the end of the most recently begun &quot;if&quot; or &quot;while&quot; block.</para>
<para><simplesect kind="return"><para>the index of the step that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="584" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1ab53cb33a21b81529d55616c916ef95c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::getComputationStep</definition>
        <argsstring>(int index, ComputationType &amp;type, std::string &amp;variable, std::string &amp;expression) const</argsstring>
        <name>getComputationStep</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94" kindref="member">ComputationType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>variable</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>expression</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the details of a computation step that has been added to the integration algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the computation step to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of computation this step performs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">variable</parametername>
</parameternamelist>
<parameterdescription>
<para>the variable into which this step stores its result. If this step does not store a result in a variable, this will be an empty string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">expression</parametername>
</parameternamelist>
<parameterdescription>
<para>the expression this step evaluates. If this step does not evaluate an expression, this will be an empty string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="597" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a7a3b99f2fcf80cf47ef3bc95ed0fa69c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::addTabulatedFunction</definition>
        <argsstring>(const std::string &amp;name, TabulatedFunction *function)</argsstring>
        <name>addTabulatedFunction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> *</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a tabulated function that may appear in expressions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the function as it appears in expressions </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> object defining the function. The <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> should have been created on the heap with the &quot;new&quot; operator. The integrator takes over ownership of it, and deletes it when the integrator itself is deleted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the function that was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="607" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1ae6408f4c9f57faf6f5256b3d095e28ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> &amp;</type>
        <definition>const TabulatedFunction &amp; OpenMM::CustomIntegrator::getTabulatedFunction</definition>
        <argsstring>(int index) const</argsstring>
        <name>getTabulatedFunction</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a const reference to a tabulated function that may appear in expressions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the function to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> object defining the function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="614" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1ad165ce50db1b55076a390756e1d940c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> &amp;</type>
        <definition>TabulatedFunction &amp; OpenMM::CustomIntegrator::getTabulatedFunction</definition>
        <argsstring>(int index)</argsstring>
        <name>getTabulatedFunction</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a reference to a tabulated function that may appear in expressions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the function to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> object defining the function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="621" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1ac2705c8873545cbfa635b347a5984c0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; OpenMM::CustomIntegrator::getTabulatedFunctionName</definition>
        <argsstring>(int index) const</argsstring>
        <name>getTabulatedFunctionName</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a tabulated function that may appear in expressions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the function to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the name of the function as it appears in expressions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="628" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a9aeb6c20d5002e9944fd504f871981e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; OpenMM::CustomIntegrator::getKineticEnergyExpression</definition>
        <argsstring>() const</argsstring>
        <name>getKineticEnergyExpression</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the expression to use for computing the kinetic energy. The expression is evaluated for every degree of freedom. Those values are then added together, and the sum is reported as the current kinetic energy. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="634" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1ae08628d8254dfcbf5a7dc2ff7ac19f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::setKineticEnergyExpression</definition>
        <argsstring>(const std::string &amp;expression)</argsstring>
        <name>setKineticEnergyExpression</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>expression</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the expression to use for computing the kinetic energy. The expression is evaluated for every degree of freedom. Those values are then added together, and the sum is reported as the current kinetic energy. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="640" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a74b3c1991a9b753b6bd2eba75770edc9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::CustomIntegrator::getRandomNumberSeed</definition>
        <argsstring>() const</argsstring>
        <name>getRandomNumberSeed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the random number seed. See <ref refid="classOpenMM_1_1CustomIntegrator_1a54f72a242b1f079862e8143a741ceca7" kindref="member">setRandomNumberSeed()</ref> for details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="644" column="9" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="644" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a54f72a242b1f079862e8143a741ceca7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::setRandomNumberSeed</definition>
        <argsstring>(int seed)</argsstring>
        <name>setRandomNumberSeed</name>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the random number seed. The precise meaning of this parameter is undefined, and is left up to each <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> to interpret in an appropriate way. It is guaranteed that if two simulations are run with different random number seeds, the sequence of random numbers will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically.</para>
<para>If seed is set to 0 (which is the default value assigned), a unique seed is chosen when a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> is created from this <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref>. This is done to ensure that each <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> receives unique random seeds without you needing to set them explicitly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="659" column="10" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="659" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a1eb08122e1eaf62121a3835f88813458" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::step</definition>
        <argsstring>(int steps)</argsstring>
        <name>step</name>
        <reimplements refid="classOpenMM_1_1Integrator_1a55151232664ae778eb2f0e2e8bbe7b67">step</reimplements>
        <param>
          <type>int</type>
          <declname>steps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Advance a simulation through time by taking a series of time steps.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>steps</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of time steps to take </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="667" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1aafc2c4f73364b34b6fdd34a326109def" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::initialize</definition>
        <argsstring>(ContextImpl &amp;context)</argsstring>
        <name>initialize</name>
        <reimplements refid="classOpenMM_1_1Integrator_1a6a2b5bcc61b799be0a37b4a431bdcd7d">initialize</reimplements>
        <param>
          <type>ContextImpl &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This will be called by the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> when it is created. It informs the <ref refid="classOpenMM_1_1Integrator" kindref="compound">Integrator</ref> of what context it will be integrating, and gives it a chance to do any necessary initialization. It will also get called again if the application calls reinitialize() on the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="674" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a077fdbfc5b6e24fe92c0d7e2a37990de" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::cleanup</definition>
        <argsstring>()</argsstring>
        <name>cleanup</name>
        <reimplements refid="classOpenMM_1_1Integrator_1a204f42ff795b94be55d0c9ba32261af6">cleanup</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This will be called by the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> when it is destroyed to let the <ref refid="classOpenMM_1_1Integrator" kindref="compound">Integrator</ref> do any necessary cleanup. It will also get called again if the application calls reinitialize() on the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="679" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a28faefe25cb874842682253ea1c0ee7a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::stateChanged</definition>
        <argsstring>(State::DataType changed)</argsstring>
        <name>stateChanged</name>
        <reimplements refid="classOpenMM_1_1Integrator_1aa41aa4c012de261afa5dda15af4fb721">stateChanged</reimplements>
        <param>
          <type><ref refid="classOpenMM_1_1State_1a33046c06dbd6c93b71cc5d1448771933" kindref="member">State::DataType</ref></type>
          <declname>changed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When the user modifies the state, we need to mark that the forces need to be recalculated. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="683" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a17b8db03ee3b05b26ce931fd83d50afc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; OpenMM::CustomIntegrator::getKernelNames</definition>
        <argsstring>()</argsstring>
        <name>getKernelNames</name>
        <reimplements refid="classOpenMM_1_1Integrator_1a8f89d06e97e930a35c0c7825f80ea9c9">getKernelNames</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the names of all Kernels used by this <ref refid="classOpenMM_1_1Integrator" kindref="compound">Integrator</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="687" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1acbf5f16ed43e6f4e74902e37a0c23d52" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double OpenMM::CustomIntegrator::computeKineticEnergy</definition>
        <argsstring>()</argsstring>
        <name>computeKineticEnergy</name>
        <reimplements refid="classOpenMM_1_1Integrator_1a0fd62d5846712eca58341556d48d991c">computeKineticEnergy</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the kinetic energy of the system at the current time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="691" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1afd5e248f023845408c373f9740079a5e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool OpenMM::CustomIntegrator::kineticEnergyRequiresForce</definition>
        <argsstring>() const</argsstring>
        <name>kineticEnergyRequiresForce</name>
        <reimplements refid="classOpenMM_1_1Integrator_1ad61399ae80cda00231dd5d573cfd30e8">kineticEnergyRequiresForce</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get whether <ref refid="classOpenMM_1_1CustomIntegrator_1acbf5f16ed43e6f4e74902e37a0c23d52" kindref="member">computeKineticEnergy()</ref> expects forces to have been computed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="695" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a33ae4b735eb3b0d8e6ec2c9352159737" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::createCheckpoint</definition>
        <argsstring>(std::ostream &amp;stream) const</argsstring>
        <name>createCheckpoint</name>
        <reimplements refid="classOpenMM_1_1Integrator_1a08d633ac9c6fbcbfc507ea8ff1fdf26a">createCheckpoint</reimplements>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is called while writing checkpoints. It gives the integrator a chance to write its own data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="700" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1aa60b1e6712c1d2541de342b7a484b38c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::loadCheckpoint</definition>
        <argsstring>(std::istream &amp;stream)</argsstring>
        <name>loadCheckpoint</name>
        <reimplements refid="classOpenMM_1_1Integrator_1a6928a443a3f4eb407e4a8e82d549683d">loadCheckpoint</reimplements>
        <param>
          <type>std::istream &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is called while loading a checkpoint. The integrator should read in whatever data it wrote in <ref refid="classOpenMM_1_1CustomIntegrator_1a33ae4b735eb3b0d8e6ec2c9352159737" kindref="member">createCheckpoint()</ref> and update its internal state accordingly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="705" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1ab2848625998710e30927955633ec235c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::serializeParameters</definition>
        <argsstring>(SerializationNode &amp;node) const</argsstring>
        <name>serializeParameters</name>
        <reimplements refid="classOpenMM_1_1Integrator_1a38196dae74d6dea780076f44a10ed4aa">serializeParameters</reimplements>
        <param>
          <type><ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is called while creating a <ref refid="classOpenMM_1_1State" kindref="compound">State</ref>. The <ref refid="classOpenMM_1_1Integrator" kindref="compound">Integrator</ref> should store the values of all time-varying parameters into the <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> so they can be saved as part of the state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="711" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1CustomIntegrator_1a17e5997bfb41fc3c838689703f0ac176" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void OpenMM::CustomIntegrator::deserializeParameters</definition>
        <argsstring>(const SerializationNode &amp;node)</argsstring>
        <name>deserializeParameters</name>
        <reimplements refid="classOpenMM_1_1Integrator_1a6ef56427b124e5e36cabfefc8c11ced4">deserializeParameters</reimplements>
        <param>
          <type>const <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is called when loading a previously saved <ref refid="classOpenMM_1_1State" kindref="compound">State</ref>. The <ref refid="classOpenMM_1_1Integrator" kindref="compound">Integrator</ref> should load the values of all time-varying parameters from the <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref>. If the node contains parameters that are not defined for this <ref refid="classOpenMM_1_1Integrator" kindref="compound">Integrator</ref>, it should throw an exception. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="718" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This is an <ref refid="classOpenMM_1_1Integrator" kindref="compound">Integrator</ref> that can be used to implemented arbitrary, user defined integration algorithms. It is flexible enough to support a wide range of methods including both deterministic and stochastic integrators, Metropolized integrators, and integrators that must integrate additional quantities along with the particle positions and momenta.</para>
<para>To create an integration algorithm, you first define a set of variables the integrator will compute. Variables come in two types: global variables have a single value, while per-DOF variables have a value for every degree of freedom (x, y, or z coordinate of a particle). You can define as many variables as you want of each type. The value of any variable can be computed by the integration algorithm, or set directly by calling a method on the <ref refid="classOpenMM_1_1CustomIntegrator" kindref="compound">CustomIntegrator</ref>. All variables are persistent between integration steps; once a value is set, it keeps that value until it is changed by the user or recomputed in a later integration step.</para>
<para>Next, you define the algorithm as a series of computations. To execute a time step, the integrator performs the list of computations in order. Each computation updates the value of one global or per-DOF value. There are several types of computations that can be done:</para>
<para><itemizedlist>
<listitem>
<para>Global: You provide a mathematical expression involving only global variables. It is evaluated and stored into a global variable. </para>
</listitem>
<listitem>
<para>Per-DOF: You provide a mathematical expression involving both global and per-DOF variables. It is evaluated once for every degree of freedom, and the values are stored into a per-DOF variable. </para>
</listitem>
<listitem>
<para>Sum: You provide a mathematical expression involving both global and per-DOF variables. It is evaluated once for every degree of freedom. All of those values are then added together, and the sum is stored into a global variable. </para>
</listitem>
<listitem>
<para>Constrain Positions: The particle positions are updated so that all distance constraints are satisfied. </para>
</listitem>
<listitem>
<para>Constrain Velocities: The particle velocities are updated so the net velocity along any constrained distance is 0. </para>
</listitem>
</itemizedlist>
</para>
<para>Like all integrators, <ref refid="classOpenMM_1_1CustomIntegrator" kindref="compound">CustomIntegrator</ref> ignores any particle whose mass is 0. It is skipped when doing per-DOF computations, and is not included when computing sums over degrees of freedom.</para>
<para>In addition to the variables you define by calling <ref refid="classOpenMM_1_1CustomIntegrator_1abeb095877e186fcc371dfd65c1cc162c" kindref="member">addGlobalVariable()</ref> and <ref refid="classOpenMM_1_1CustomIntegrator_1a250dc9f94c2c9e7ec3c6f6f6b5ea3b92" kindref="member">addPerDofVariable()</ref>, the integrator provides the following pre-defined variables:</para>
<para><itemizedlist>
<listitem>
<para>dt: (global) This is the step size being used by the integrator. </para>
</listitem>
<listitem>
<para>energy: (global, read-only) This is the current potential energy of the system. </para>
</listitem>
<listitem>
<para>energy0, energy1, energy2, ...: (global, read-only) This is similar to energy, but includes only the contribution from forces in one force group. A single computation step may only depend on a single energy variable (energy, energy0, energy1, etc.). </para>
</listitem>
<listitem>
<para>x: (per-DOF) This is the current value of the degree of freedom (the x, y, or z coordinate of a particle). </para>
</listitem>
<listitem>
<para>v: (per-DOF) This is the current velocity associated with the degree of freedom (the x, y, or z component of a particle&apos;s velocity). </para>
</listitem>
<listitem>
<para>f: (per-DOF, read-only) This is the current force acting on the degree of freedom (the x, y, or z component of the force on a particle). </para>
</listitem>
<listitem>
<para>f0, f1, f2, ...: (per-DOF, read-only) This is similar to f, but includes only the contribution from forces in one force group. A single computation step may only depend on a single force variable (f, f0, f1, etc.). </para>
</listitem>
<listitem>
<para>m: (per-DOF, read-only) This is the mass of the particle the degree of freedom is associated with. </para>
</listitem>
<listitem>
<para>uniform: (either global or per-DOF, read-only) This is a uniformly distributed random number between 0 and 1. Every time an expression is evaluated, a different value will be used. When used in a per-DOF expression, a different value will be used for every degree of freedom. Note, however, that if this variable appears multiple times in a single expression, the same value is used everywhere it appears in that expression. </para>
</listitem>
<listitem>
<para>gaussian: (either global or per-DOF, read-only) This is a Gaussian distributed random number with mean 0 and variance 1. Every time an expression is evaluated, a different value will be used. When used in a per-DOF expression, a different value will be used for every degree of freedom. Note, however, that if this variable appears multiple times in a single expression, the same value is used everywhere it appears in that expression. </para>
</listitem>
<listitem>
<para>A global variable is created for every adjustable parameter defined in the integrator&apos;s <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>. </para>
</listitem>
</itemizedlist>
</para>
<para>The following example uses a <ref refid="classOpenMM_1_1CustomIntegrator" kindref="compound">CustomIntegrator</ref> to implement a velocity Verlet integrator:</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    CustomIntegrator integrator(0.001);
*    integrator.addComputePerDof(&quot;v&quot;, &quot;v+0.5*dt*f/m&quot;);
*    integrator.addComputePerDof(&quot;x&quot;, &quot;x+dt*v&quot;);
*    integrator.addComputePerDof(&quot;v&quot;, &quot;v+0.5*dt*f/m&quot;);
*
* </verbatim></para>
<para>The first step updates the velocities based on the current forces. The second step updates the positions based on the new velocities, and the third step updates the velocities again. Although the first and third steps look identical, the forces used in them are different. You do not need to tell the integrator that; it will recognize that the positions have changed and know to recompute the forces automatically.</para>
<para>The above example has two problems. First, it does not respect distance constraints. To make the integrator work with constraints, you need to add extra steps to tell it when and how to apply them. Second, it never gives Forces an opportunity to update the context state. This should be done every time step so that, for example, an <ref refid="classOpenMM_1_1AndersenThermostat" kindref="compound">AndersenThermostat</ref> can randomize velocities or a <ref refid="classOpenMM_1_1MonteCarloBarostat" kindref="compound">MonteCarloBarostat</ref> can scale particle positions. You need to add a step to tell the integrator when to do this. The following example corrects both these problems, using the RATTLE algorithm to apply constraints:</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    CustomIntegrator integrator(0.001);
*    integrator.addPerDofVariable(&quot;x1&quot;, 0);
*    integrator.addUpdateContextState();
*    integrator.addComputePerDof(&quot;v&quot;, &quot;v+0.5*dt*f/m&quot;);
*    integrator.addComputePerDof(&quot;x&quot;, &quot;x+dt*v&quot;);
*    integrator.addComputePerDof(&quot;x1&quot;, &quot;x&quot;);
*    integrator.addConstrainPositions();
*    integrator.addComputePerDof(&quot;v&quot;, &quot;v+0.5*dt*f/m+(x-x1)/dt&quot;);
*    integrator.addConstrainVelocities();
*
* </verbatim></para>
<para><ref refid="classOpenMM_1_1CustomIntegrator" kindref="compound">CustomIntegrator</ref> can be used to implement multiple time step integrators. The following example shows an r-RESPA integrator. It assumes the quickly changing forces are in force group 0 and the slowly changing ones are in force group 1. It evaluates the &quot;fast&quot; forces four times as often as the &quot;slow&quot; forces.</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    CustomIntegrator integrator(0.004);
*    integrator.addComputePerDof(&quot;v&quot;, &quot;v+0.5*dt*f1/m&quot;);
*    for (int i = 0; i &amp;lt; 4; i++) {
*        integrator.addComputePerDof(&quot;v&quot;, &quot;v+0.5*(dt/4)*f0/m&quot;);
*        integrator.addComputePerDof(&quot;x&quot;, &quot;x+(dt/4)*v&quot;);
*        integrator.addComputePerDof(&quot;v&quot;, &quot;v+0.5*(dt/4)*f0/m&quot;);
*    }
*    integrator.addComputePerDof(&quot;v&quot;, &quot;v+0.5*dt*f1/m&quot;);
*
* </verbatim></para>
<para>The sequence of computations in a <ref refid="classOpenMM_1_1CustomIntegrator" kindref="compound">CustomIntegrator</ref> can include flow control in the form of &quot;if&quot; and &quot;while&quot; blocks. The computations inside an &quot;if&quot; block are executed either zero or one times, depending on whether a condition is true. The computations inside a &quot;while&quot; block are executed repeatedly for as long as the condition remains true. Be very careful when writing &quot;while&quot; blocks; there is nothing to stop you from creating an infinite loop!</para>
<para>For example, suppose you are writing a Monte Carlo algorithm. Assume you have already computed a new set of particle coordinates &quot;xnew&quot; and a step acceptance probability &quot;acceptanceProbability&quot;. The following lines use an &quot;if&quot; block to decide whether to accept the step, and if it is accepted, store the new positions into &quot;x&quot;.</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    integrator.beginIfBlock(&quot;uniform &lt; acceptanceProbability&quot;);
*    integrator.addComputePerDof(&quot;x&quot;, &quot;xnew&quot;);
*    integrator.endBlock();
*
* </verbatim></para>
<para>The condition in an &quot;if&quot; or &quot;while&quot; block is evaluated globally, so it may only involve global variables, not per-DOF ones. It may use any of the following comparison operators: =, &lt;. &gt;, !=, &lt;=, &gt;=. Blocks may be nested inside each other.</para>
<para>&quot;Per-DOF&quot; computations can also be thought of as per-particle computations that operate on three component vectors. For example, &quot;x+dt*v&quot; means to take the particle&apos;s velocity (a vector), multiply it by the step size, and add the position (also a vector). The result is a new vector that can be stored into a per-DOF variable with <ref refid="classOpenMM_1_1CustomIntegrator_1a6934c0a85e70f7d9ae527d66893e76f7" kindref="member">addComputePerDof()</ref>, or it can be summed over all components of all particles with <ref refid="classOpenMM_1_1CustomIntegrator_1a1f01f987d11e6945753ff04985adc69f" kindref="member">addComputeSum()</ref>. Because the calculation is done on vectors, you can use functions that operate explicitly on vectors rather than just computing each component independently. For example, the following line uses a cross product to compute the angular momentum of each particle and stores it into a per-DOF variable.</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    integrator.addComputePerDof(&quot;angularMomentum&quot;, &quot;m*cross(x, v)&quot;);
*
* </verbatim></para>
<para>Here are two more examples that may be useful as starting points for writing your own integrators. The first one implements the algorithm used by the standard <ref refid="classOpenMM_1_1VerletIntegrator" kindref="compound">VerletIntegrator</ref> class. This is a leapfrog algorithm, in contrast to the velocity Verlet algorithm shown above, so it only requires applying constraints once in each time step.</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    CustomIntegrator integrator(dt);
*    integrator.addPerDofVariable(&quot;x0&quot;, 0);
*    integrator.addUpdateContextState();
*    integrator.addComputePerDof(&quot;x0&quot;, &quot;x&quot;);
*    integrator.addComputePerDof(&quot;v&quot;, &quot;v+dt*f/m&quot;);
*    integrator.addComputePerDof(&quot;x&quot;, &quot;x+dt*v&quot;);
*    integrator.addConstrainPositions();
*    integrator.addComputePerDof(&quot;v&quot;, &quot;(x-x0)/dt&quot;);
*
* </verbatim></para>
<para>The second one implements the algorithm used by the standard <ref refid="classOpenMM_1_1LangevinMiddleIntegrator" kindref="compound">LangevinMiddleIntegrator</ref> class. kB is Boltzmann&apos;s constant.</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    CustomIntegrator integrator(dt);
*    integrator.addGlobalVariable(&quot;a&quot;, exp(-friction*dt));
*    integrator.addGlobalVariable(&quot;b&quot;, sqrt(1-exp(-2*friction*dt)));
*    integrator.addGlobalVariable(&quot;kT&quot;, kB*temperature);
*    integrator.addPerDofVariable(&quot;x1&quot;, 0);
*    integrator.addUpdateContextState();
*    integrator.addComputePerDof(&quot;v&quot;, &quot;v + dt*f/m&quot;);
*    integrator.addConstrainVelocities();
*    integrator.addComputePerDof(&quot;x&quot;, &quot;x + 0.5*dt*v&quot;);
*    integrator.addComputePerDof(&quot;v&quot;, &quot;a*v + b*sqrt(kT/m)*gaussian&quot;);
*    integrator.addComputePerDof(&quot;x&quot;, &quot;x + 0.5*dt*v&quot;);
*    integrator.addComputePerDof(&quot;x1&quot;, &quot;x&quot;);
*    integrator.addConstrainPositions();
*    integrator.addComputePerDof(&quot;v&quot;, &quot;v + (x-x1)/dt&quot;);
*
* </verbatim></para>
<para>Another feature of <ref refid="classOpenMM_1_1CustomIntegrator" kindref="compound">CustomIntegrator</ref> is that it can use derivatives of the potential energy with respect to context parameters. These derivatives are typically computed by custom forces, and are only computed if a <ref refid="classOpenMM_1_1Force" kindref="compound">Force</ref> object has been specifically told to compute them by calling addEnergyParameterDerivative() on it. <ref refid="classOpenMM_1_1CustomIntegrator" kindref="compound">CustomIntegrator</ref> provides a deriv() function for accessing these derivatives in global or per-DOF expressions. For example, &quot;deriv(energy, lambda)&quot; is the derivative of the total potentially energy with respect to the parameter lambda. You can also restrict it to a single force group by specifying a different variable for the first argument, such as &quot;deriv(energy1, lambda)&quot;.</para>
<para>An <ref refid="classOpenMM_1_1Integrator" kindref="compound">Integrator</ref> has one other job in addition to evolving the equations of motion: it defines how to compute the kinetic energy of the system. Depending on the integration method used, simply summing (mv^2)/2 over all degrees of freedom may not give the correct answer. For example, in a leapfrog integrator the velocities are &quot;delayed&quot; by half a time step, so the above formula would give the kinetic energy half a time step ago, not at the current time.</para>
<para>Call <ref refid="classOpenMM_1_1CustomIntegrator_1ae08628d8254dfcbf5a7dc2ff7ac19f7b" kindref="member">setKineticEnergyExpression()</ref> to set an expression for the kinetic energy. It is computed for every degree of freedom (excluding ones whose mass is 0) and the result is summed. The default expression is &quot;m*v*v/2&quot;, which is correct for many integrators.</para>
<para>As example, the following line defines the correct way to compute kinetic energy when using a leapfrog algorithm:</para>
<para><verbatim>embed:rst:leading-asterisk
* .. code-block:: cpp
*
*    integrator.setKineticEnergyExpression(&quot;m*v1*v1/2; v1=v+0.5*dt*f/m&quot;);
*
* </verbatim></para>
<para>The kinetic energy expression may depend on the following pre-defined variables: x, v, f, m, dt. It also may depend on user-defined global and per-DOF variables, and on the values of adjustable parameters defined in the integrator&apos;s <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>. It may not depend on any other variable, such as the potential energy, the force from a single force group, or a random number.</para>
<para>Expressions may involve the operators + (add), - (subtract), * (multiply), / (divide), and ^ (power), and the following functions: sqrt, exp, log, sin, cos, sec, csc, tan, cot, asin, acos, atan, atan2, sinh, cosh, tanh, erf, erfc, min, max, abs, floor, ceil, step, delta, select. All trigonometric functions are defined in radians, and log is the natural logarithm. step(x) = 0 if x is less than 0, 1 otherwise. delta(x) = 1 if x is 0, 0 otherwise. select(x,y,z) = z if x = 0, y otherwise. An expression may also involve intermediate quantities that are defined following the main expression, using &quot;;&quot; as a separator.</para>
<para>Expressions used in ComputePerDof and ComputeSum steps can also use the following functions that operate on vectors: cross(a, b) is the cross product of two vectors; dot(a, b) is the dot product of two vectors; _x(a), _y(a), and _z(a) extract a single component from a vector; and vector(a, b, c) creates a new vector with the x component of the first argument, the y component of the second argument, and the z component of the third argument. Remember that every quantity appearing in a vector expression is a vector. Functions that appear to return a scalar really return a vector whose components are all the same. For example, _z(a) returns the vector (a.z, a.z, a.z). Likewise, wherever a constant appears in the expression, it really means a vector whose components all have the same value.</para>
<para>In addition, you can call <ref refid="classOpenMM_1_1CustomIntegrator_1a7a3b99f2fcf80cf47ef3bc95ed0fa69c" kindref="member">addTabulatedFunction()</ref> to define a new function based on tabulated values. You specify the function by creating a <ref refid="classOpenMM_1_1TabulatedFunction" kindref="compound">TabulatedFunction</ref> object. That function can then appear in expressions. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>OpenMM::CustomIntegrator</label>
        <link refid="classOpenMM_1_1CustomIntegrator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>OpenMM::Integrator</label>
        <link refid="classOpenMM_1_1Integrator"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>OpenMM::Context</label>
        <link refid="classOpenMM_1_1Context"/>
      </node>
      <node id="1">
        <label>OpenMM::CustomIntegrator</label>
        <link refid="classOpenMM_1_1CustomIntegrator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>OpenMM::Integrator</label>
        <link refid="classOpenMM_1_1Integrator"/>
        <childnode refid="3" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" line="339" column="1" bodyfile="/storage/coda1/p-jmcdaniel43/0/jhymel6/OpenMM_verisons/openmm_7.7.0_qmmm/openmmapi/include/openmm/CustomIntegrator.h" bodystart="339" bodyend="733"/>
    <listofallmembers>
      <member refid="classOpenMM_1_1CustomIntegrator_1adedc9cd6343d2383f84162eff7f210cc" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>addComputeGlobal</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a6934c0a85e70f7d9ae527d66893e76f7" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>addComputePerDof</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a1f01f987d11e6945753ff04985adc69f" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>addComputeSum</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a7de186fff300b99bec76eb02eb87365d" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>addConstrainPositions</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a147f50c1e80c9d89ee48787718aeae2f" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>addConstrainVelocities</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1abeb095877e186fcc371dfd65c1cc162c" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>addGlobalVariable</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a250dc9f94c2c9e7ec3c6f6f6b5ea3b92" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>addPerDofVariable</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a7a3b99f2fcf80cf47ef3bc95ed0fa69c" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>addTabulatedFunction</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a25b0be3ed185e03a968b8dcd0fa77c66" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>addUpdateContextState</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1aa77438c52f9652b8a3444ebb46dbd1db" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>beginIfBlock</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1ab6ce81fa4f63bff07bec400e9a31f868" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>beginWhileBlock</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94a2b264f743b6d84d630419d306fb88dad" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>BlockEnd</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a077fdbfc5b6e24fe92c0d7e2a37990de" prot="protected" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>cleanup</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a30dc9ef694a936f92fc4919bd8afc309" prot="private" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>computations</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>ComputationType</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94aa40bc23c31491e49873971387c084fbc" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>ComputeGlobal</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1acbf5f16ed43e6f4e74902e37a0c23d52" prot="protected" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>computeKineticEnergy</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94af98c2d634cc8936bae2c352744247d2c" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>ComputePerDof</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94a8ceb4bc519cb7d862ef03fd71f96412d" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>ComputeSum</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94a4e393da7491775e311c5f4b7de68597c" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>ConstrainPositions</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94aae0af132e8fe14e9a33e7f04b5c30a98" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>ConstrainVelocities</name></member>
      <member refid="classOpenMM_1_1Integrator_1ac9c1c07848ae2c2e8617a949a11070c1" prot="protected" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>context</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a33ae4b735eb3b0d8e6ec2c9352159737" prot="protected" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>createCheckpoint</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1ad8618f8cb7acb291d0332281d590c5df" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>CustomIntegrator</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a17e5997bfb41fc3c838689703f0ac176" prot="protected" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>deserializeParameters</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a8516b990b15836fc9c17074c5b1b395e" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>endBlock</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1af258dc48bcaa86017396e054840da074" prot="private" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>forcesAreValid</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1aafd0296fa54d29ea49576a310cb29ecd" prot="private" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>functions</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1ab53cb33a21b81529d55616c916ef95c3" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getComputationStep</name></member>
      <member refid="classOpenMM_1_1Integrator_1af742feb7b5b9adfcb259bf2dbc9319c4" prot="public" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>getConstraintTolerance</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a08fbbd98541cadbe1431df1c36856d35" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getGlobalVariable</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1ad410984c1fa883c6c8c122b19fbc8a98" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getGlobalVariableByName</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a77f35fa9cc35fdcb13fb136f6f246325" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getGlobalVariableName</name></member>
      <member refid="classOpenMM_1_1Integrator_1a38c94f952b4fcab36371402e508eacf1" prot="public" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>getIntegrationForceGroups</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a17b8db03ee3b05b26ce931fd83d50afc" prot="protected" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>getKernelNames</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a9aeb6c20d5002e9944fd504f871981e6" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getKineticEnergyExpression</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a24f7447f1776d1ba0cf026db26d30d00" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getNumComputations</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1aee483aabbf2e5bc7c4691303793d4fa4" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getNumGlobalVariables</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a3be849e19479c3c6c85cbe84abe8b28d" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getNumPerDofVariables</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1ab5107b0f20adc0b84a20bed33ec8ac32" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getNumTabulatedFunctions</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1ad5eeda5f7b94d86f7f0c9adf62ee62b2" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getPerDofVariable</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a042c3e391c9bb9db38e53900a927b2cf" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getPerDofVariableByName</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a3af3eb9c385efdb3ee81b8b9bb35b625" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getPerDofVariableName</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a74b3c1991a9b753b6bd2eba75770edc9" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getRandomNumberSeed</name></member>
      <member refid="classOpenMM_1_1Integrator_1a880821318aee5b25b02f0929887825c1" prot="public" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>getStepSize</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1ae6408f4c9f57faf6f5256b3d095e28ec" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getTabulatedFunction</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1ad165ce50db1b55076a390756e1d940c4" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getTabulatedFunction</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1ac2705c8873545cbfa635b347a5984c0c" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>getTabulatedFunctionName</name></member>
      <member refid="classOpenMM_1_1Integrator_1a3a3874d3287e9e2ef4bd21dd2dd02d8a" prot="protected" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>getVelocitiesForTemperature</name></member>
      <member refid="classOpenMM_1_1Integrator_1a1fc2b21fac0b7497399a499f24c2628f" prot="protected" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>getVelocityTimeOffset</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a8fcddb77658859ba303526131f7f32d1" prot="private" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>globalNames</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a21e8e99537801a9da64548e9ca49df9e" prot="private" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>globalsAreCurrent</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1ae1d4224e365373b92cb36649f3c5b600" prot="private" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>globalValues</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94a7f9fa6cb4b0e7e4b260f9f5fa54708d2" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>IfBlockStart</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1aafc2c4f73364b34b6fdd34a326109def" prot="protected" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>initialize</name></member>
      <member refid="classOpenMM_1_1Integrator_1a2732506bfb2afd8e2e9954d08cab1304" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>Integrator</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1af3b67fb22f1bf98fbba0722261b740de" prot="private" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>keNeedsForce</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1acf5cbf5682744abce7c4747321455a42" prot="private" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>kernel</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1aa70d7fc5de073d43aa84cdb306e39107" prot="private" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>kineticEnergy</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1afd5e248f023845408c373f9740079a5e" prot="protected" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>kineticEnergyRequiresForce</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1aa60b1e6712c1d2541de342b7a484b38c" prot="protected" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>loadCheckpoint</name></member>
      <member refid="classOpenMM_1_1Integrator_1ab3f6088553343feb8f47ab789e7a09a1" prot="protected" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>owner</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a10cd491cf66e9cffe9b13915f4c1ad21" prot="private" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>perDofNames</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a9732f1d67156c176671adfd9ee990341" prot="private" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>perDofValues</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a2e9ee85231ae489b00cc0c4ebbedd3e3" prot="private" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>randomNumberSeed</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1ab2848625998710e30927955633ec235c" prot="protected" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>serializeParameters</name></member>
      <member refid="classOpenMM_1_1Integrator_1a47f81ac027670bcad6050c72cc41bd67" prot="public" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>setConstraintTolerance</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a81ccb39f44fcc518c604d98480c1760b" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>setGlobalVariable</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a85e94b7451cef82cc49cfe3b5837aeef" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>setGlobalVariableByName</name></member>
      <member refid="classOpenMM_1_1Integrator_1a22b42a4a502c999d87e6bbd3f444eab4" prot="public" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>setIntegrationForceGroups</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1ae08628d8254dfcbf5a7dc2ff7ac19f7b" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>setKineticEnergyExpression</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a2820061e2af5f40c0c03091557562595" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>setPerDofVariable</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a70af73b410e7c6c30456e759051c941e" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>setPerDofVariableByName</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a54f72a242b1f079862e8143a741ceca7" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>setRandomNumberSeed</name></member>
      <member refid="classOpenMM_1_1Integrator_1a86ef00f4e3abb9e3e325e3c4ebe5ead1" prot="public" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>setStepSize</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a28faefe25cb874842682253ea1c0ee7a" prot="protected" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>stateChanged</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a1eb08122e1eaf62121a3835f88813458" prot="public" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>step</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94aa1276890a76ddddd33dd49a70f4cd538" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>UpdateContextState</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a8455f563a82564ce2598bb16eef7fe94a8541378242db55f1dd401923e7f1d59c" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>WhileBlockStart</name></member>
      <member refid="classOpenMM_1_1CustomIntegrator_1a9b78c860b1075c0086a4761ba2a79d5a" prot="public" virt="non-virtual"><scope>OpenMM::CustomIntegrator</scope><name>~CustomIntegrator</name></member>
      <member refid="classOpenMM_1_1Integrator_1a9abbef84d9e2c4e5a3d3139f8fa84fff" prot="public" virt="virtual"><scope>OpenMM::CustomIntegrator</scope><name>~Integrator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
